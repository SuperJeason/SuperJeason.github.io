{
    "version": "https://jsonfeed.org/version/1",
    "title": "Never Give Up",
    "subtitle": "",
    "icon": "https://superjeason.github.io/assets/favicon.ico",
    "description": "Practice makes perfect",
    "home_page_url": "https://superjeason.github.io",
    "items": [
        {
            "id": "https://superjeason.github.io/2024/07/14/%E7%94%B5%E8%84%91%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%A4%87%E4%BB%BD/",
            "url": "https://superjeason.github.io/2024/07/14/%E7%94%B5%E8%84%91%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%A4%87%E4%BB%BD/",
            "title": "电脑常用软件备份",
            "date_published": "2024-07-14T03:42:03.000Z",
            "content_html": "<h2 id=\"git\"><a class=\"anchor\" href=\"#git\">#</a> Git</h2>\n<p><a href=\"https://git-scm.com/\">git</a>   分布式代码管理平台</p>\n<p><a href=\"https://www.gitkraken.com/\">gitkraken</a>   git 图形化工具</p>\n<p><a href=\"https://github.com/SuperJeason/Modules-Learn\">gitkraken 使用</a>    软件破解教程</p>\n<h2 id=\"代码编辑\"><a class=\"anchor\" href=\"#代码编辑\">#</a> 代码编辑</h2>\n<p><a href=\"https://code.visualstudio.com/\">vscode</a>   好用的代码编辑器</p>\n<p><a href=\"https://www.jetbrains.com/\">jetbrain</a>    jetbrains 全家桶</p>\n<p><a href=\"https://ww0.lanzouo.com/iQqji24eu9gb\">jetbrain 破解工具</a>  一键破解脚本（密码：h8fq）</p>\n<h2 id=\"腾讯系软件\"><a class=\"anchor\" href=\"#腾讯系软件\">#</a> 腾讯系软件</h2>\n<p><a href=\"https://im.qq.com/index/\">QQ</a>   QQ 聊天工具</p>\n<p><a href=\"https://weixin.qq.com/\">微信</a>   微信聊天工具</p>\n<p><a href=\"https://liteloaderqqnt.github.io/\">liteloaderqqnt</a>    QQNT 优化插件</p>\n<p><a href=\"https://meeting.tencent.com/\">腾讯会议</a>  会议软件</p>\n<h2 id=\"浏览器\"><a class=\"anchor\" href=\"#浏览器\">#</a> 浏览器</h2>\n<p><a href=\"https://www.google.com/chrome/\">谷歌浏览器</a>   谷歌浏览器</p>\n<p><a href=\"https://blog.csdn.net/qq_27471405/article/details/88902743?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172093107416800225544725%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=172093107416800225544725&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-88902743-null-null.142%5Ev100%5Epc_search_result_base4&amp;utm_term=%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E4%BD%8D%E7%BD%AE&amp;spm=1018.2226.3001.4187\">csdn 教程</a>  谷歌浏览器修改安装位置</p>\n<h2 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> 数据库</h2>\n<p><a href=\"https://www.mysql.com/cn/\">mysql</a>   mysql 数据库</p>\n<p><a href=\"https://blog.csdn.net/weixin_50964512/article/details/124645212?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=mysql%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-124645212.142%5Ev100%5Epc_search_result_base4&amp;spm=1018.2226.3001.4187\">mysql 安装教程</a> mysql 数据库安装</p>\n<p><a href=\"https://navicat.com/en/\">navicat</a>  数据库可视化工具</p>\n<p><a href=\"https://ww0.lanzouo.com/ibhba24eytqf\">navicat 破解教程</a>  navicat 破解工具</p>\n<h2 id=\"建站\"><a class=\"anchor\" href=\"#建站\">#</a> 建站</h2>\n<p><a href=\"https://hexo.io/zh-cn/\">hexo</a>  hexo 博客框架</p>\n<p><a href=\"https://nodejs.org/zh-cn\">Node.js</a>  Node.js 框架</p>\n<p><a href=\"https://docs-hexo.shokax.top/getting-started/\">shokax</a>  shokax 安装文档</p>\n<h2 id=\"效率工具\"><a class=\"anchor\" href=\"#效率工具\">#</a> 效率工具</h2>\n<p><a href=\"https://typora.io/\">typora</a>   markdown 编辑器</p>\n<p><a href=\"https://www.wps.com/\">wps</a>  wps 办公软件</p>\n<p><a href=\"https://otp.landian.vip/zh-cn/\">office-tools-plus</a>  office 安装工具</p>\n<p><a href=\"https://notepad-plus-plus.org/downloads/\">notepad++</a>  记事本软件</p>\n<p><a href=\"https://pixpinapp.com/\">Pixpin</a>  截图软件</p>\n<p><a href=\"https://feiniaoyun11.life/#/login\">飞鸟云</a>  科学上网</p>\n<p><a href=\"https://pan.baidu.com/\">百度网盘</a>  百度网盘工具</p>\n<p><a href=\"https://www.lanzoub.com/iLdEF1s0dtsf\">迅雷绿色</a>  迅雷绿色版</p>\n<p><a href=\"https://yaohuo.me/bbs-1216122.html\">其他软件</a>  c 大电脑软件教程</p>\n",
            "tags": [
                "电脑软件"
            ]
        },
        {
            "id": "https://superjeason.github.io/2024/07/13/hello-world/",
            "url": "https://superjeason.github.io/2024/07/13/hello-world/",
            "title": "Hello World",
            "date_published": "2024-07-13T06:46:33.210Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        },
        {
            "id": "https://superjeason.github.io/2024/07/03/Java/java%E6%B3%A8%E8%A7%A3/",
            "url": "https://superjeason.github.io/2024/07/03/Java/java%E6%B3%A8%E8%A7%A3/",
            "title": "java注解",
            "date_published": "2024-07-03T06:13:43.000Z",
            "content_html": "<h1 id=\"注解机制\"><a class=\"anchor\" href=\"#注解机制\">#</a> 注解机制</h1>\n<h2 id=\"注解概述\"><a class=\"anchor\" href=\"#注解概述\">#</a> 注解概述</h2>\n<h3 id=\"格式\"><a class=\"anchor\" href=\"#格式\">#</a> 格式</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> 注解名称<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    属性列表<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h3>\n<p>根据其定义者的角色可以分为以下四种种：</p>\n<ol>\n<li>元注解：修饰注解的注解</li>\n<li>标准注解：JDK 内置的注解</li>\n<li>框架注解：第三方框架提供的注解</li>\n<li>自定义注解：用户自定义的注解</li>\n</ol>\n<blockquote>\n<p>还可以根据其出现的位置分为类、方法、变量和形参的注解。也可以其作用范围分为标准注解、元注解、自定义注解。</p>\n</blockquote>\n<h3 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h3>\n<ul>\n<li>出现位置：注解常常出现在类、方法、成员变量、形参位置。</li>\n<li>注解级别：注解和类、接口、枚举是同一级别的。</li>\n</ul>\n<ol>\n<li>\n<p>如果说注释是写给人看的，那么注解就是写给程序看的。它更像一个标签，贴在一个类、一个方法或者字段上。它的目的是为当前读取该注解的程序提供判断依据及少量附加信息。</p>\n<ol>\n<li>程序只要读到加了 @Test 的方法，就知道该方法是待测试方法，</li>\n<li>@Before 注解，程序看到这个注解，就知道该方法要放在 @Test 方法之前执行。</li>\n<li>有时我们还可以通过注解属性，为将来读取这个注解的程序提供必要的附加信息，比如 @RequestMapping (&quot;/user/info&quot;) 提供了 Controller 某个接口的 URL 路径。</li>\n</ol>\n</li>\n<li>\n<p>Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。注解不会也不能影响代码的实际逻辑，仅仅起到辅助性的作用。</p>\n</li>\n</ol>\n<blockquote>\n<p>java 中的注解和自己想像中的作用不太一样。以前一直以为与 python 中的方法类似，提供一种包装功能、横向扩展功能，在执行该方法前，会额外执行一系列函数，完成逻辑处理。但是现在看来，他只是提供了一种信息的配置方式，注解本身不执行逻辑，而是由能够解析他的对象实现对注解的解析。</p>\n</blockquote>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>注解只有被解析之后才会生效，常见的解析方法有两种：</p>\n<ul>\n<li>编译期间直接扫描：编译器在编译 Java 代码的时候扫描对于的注解并处理，比如某个方法使用了 @Override，编译器在编译的时候就会检测当前的方法是否重写了父类对于的方法。</li>\n<li>运行期间通过反射处理：这个经常在 Spring 框架中看到，例如 Spring 的 @Value 注解，就是通过反射来进行处理的。</li>\n</ul>\n<h2 id=\"注解使用\"><a class=\"anchor\" href=\"#注解使用\">#</a> 注解使用</h2>\n<h3 id=\"注解的实现原理\"><a class=\"anchor\" href=\"#注解的实现原理\">#</a> 注解的实现原理</h3>\n<ul>\n<li>注解代码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>反编译后的代码</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pbulic <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>@interface 变成了 interface，而且自动继承了 Annotation</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 由于 interface 默认的方法是 public abstract 的所以可以写成如下格式。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>getValue () 被称为 Info 注解的属性。可以在使用的时候被赋值。表示给该方法传递参数。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author qiyu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>getValue <span class=\"token operator\">=</span> <span class=\"token string\">\"annotation on class\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>getValue <span class=\"token operator\">=</span> <span class=\"token string\">\"annotation on field\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>getValue <span class=\"token operator\">=</span> <span class=\"token string\">\"annotation on method\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>注解中可以指定默认的属性</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">default</span> <span class=\"token string\">\"default value\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"注解的使用步骤\"><a class=\"anchor\" href=\"#注解的使用步骤\">#</a> 注解的使用步骤</h3>\n<p>注解的使用包括三个步骤。</p>\n<ol>\n<li>定义注解</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author qiyu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"no description\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用注解</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author qiyu</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>getValue <span class=\"token operator\">=</span> <span class=\"token string\">\"annotation on class\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>getValue <span class=\"token operator\">=</span> <span class=\"token string\">\"annotation on field\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span>getValue <span class=\"token operator\">=</span> <span class=\"token string\">\"annotation on method\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 故意不指定 getValue</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">defaultMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>读取注解</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AnnotationTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 获取类上的注解</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Demo</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">MyAnnotation</span> annotationOnClass <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>annotationOnClass<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取成员变量上的注解</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Field</span> name <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">MyAnnotation</span> annotationOnField <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>annotationOnField<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 获取 hello 方法上的注解</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Method</span> hello <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">MyAnnotation</span> annotationOnMethod <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>annotationOnMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 获取 defaultMethod 方法上的注解</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Method</span> defaultMethod <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"defaultMethod\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">MyAnnotation</span> annotationOnDefaultMethod <span class=\"token operator\">=</span> defaultMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyAnnotation</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>annotationOnDefaultMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注解的读取并不只有反射一种途径。比如 @Override，它由编译器读取（你写完代码 ctrl+s 时就编译了），而编译器只是检查语法错误，此时程序尚未运行。保留策略为 SOURCE，仅仅是源码阶段，编译成.class 文件后就消失</p>\n</blockquote>\n<h3 id=\"属性的数据类型及特别的属性value和数组\"><a class=\"anchor\" href=\"#属性的数据类型及特别的属性value和数组\">#</a> 属性的数据类型及特别的属性：value 和数组</h3>\n<p>属性的数据类型</p>\n<ul>\n<li>八种基本数据类型</li>\n<li>String</li>\n<li>枚举</li>\n<li>Class</li>\n<li>注解类型</li>\n<li>以上类型的一维数组</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 8 种基本数据类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//... 其他类型省略</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// String</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 枚举</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">CityEnum</span> <span class=\"token function\">cityName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// Class 类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">clazz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 注解类型</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">MyAnnotation2</span> <span class=\"token function\">annotation2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 以上几种类型的数组类型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">intValueArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">names</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//... 其他类型省略</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">MyAnnotation2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">CityEnum</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token constant\">BEIJING</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token constant\">HANGZHOU</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token constant\">SHANGHAI</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token annotation punctuation\">@MyAnnotation</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 8 种基本类型</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        intValue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        longValue <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// String</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        name <span class=\"token operator\">=</span> <span class=\"token string\">\"annotation on class\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 枚举</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        cityName <span class=\"token operator\">=</span> <span class=\"token class-name\">CityEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BEIJING</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// Class</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        clazz <span class=\"token operator\">=</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 注解</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        annotation2 <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@MyAnnotation2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 一维数组</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        intValueArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        names <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"Are\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"you\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OK?\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 省略...</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>如果注解的属性只有一个，且叫 value，那么使用该注解时，可以不用指定属性名，因为默认就是给 value 赋值。</li>\n<li>数组属性。如果数组的元素只有一个，可以省略花括号 {}</li>\n<li>用常量类为注解属性赋值。如果你希望为注解的属性提供统一的几个可选值，可以使用常量类。</li>\n</ul>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li>注解就像标签，是程序判断执行的依据。比如，程序读到 @Test 就知道这个方法是待测试方法，而 @Before 的方法要在测试方法之前执行注解需要三要素：定义、使用、读取并执行注解分为自定义注解、JDK 内置注解和第三方注解（框架）。</li>\n<li>自定义注解一般要我们自己定义、使用、并写程序读取，而 JDK 内置注解和第三方注解我们只要使用，定义和读取都交给它们大多数情况下，三角关系中我们只负责使用注解，无需定义和执行，框架会将注解类和读取注解的程序隐藏起来，除非阅读源码，否则根本看不到。平时见不到定义和读取的过程，光顾着使用注解，久而久之很多人就忘了注解如何起作用了！</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"image/2022-07-12-10-04-38.png\" alt=\"\" /></p>\n<h2 id=\"元注解\"><a class=\"anchor\" href=\"#元注解\">#</a> 元注解</h2>\n<p>加在注解上的注解。</p>\n<h3 id=\"target\"><a class=\"anchor\" href=\"#target\">#</a> @Target</h3>\n<p>加在注解上，限定该注解的使用位置，它指明了它所修饰的注解使用的范围。@Target 元注解修饰那么根据 Value（ElementType 枚举常量）的指定的目标进行规定。</p>\n<ul>\n<li>@Target (ElementType.TYPE)   // 接口、类、枚举</li>\n<li>@Target (ElementType.FIELD) // 字段、枚举的常量</li>\n<li>@Target (ElementType.METHOD) // 方法</li>\n<li>@Target (ElementType.PARAMETER) // 方法参数</li>\n<li>@Target (ElementType.CONSTRUCTOR)  // 构造函数</li>\n<li>@Target (ElementType.LOCAL_VARIABLE)// 局部变量</li>\n<li>@Target (ElementType.ANNOTATION_TYPE)// 注解</li>\n<li>@Target (ElementType.PACKAGE) /// 包</li>\n</ul>\n<h3 id=\"retention\"><a class=\"anchor\" href=\"#retention\">#</a> @Retention</h3>\n<p>注解的保留策略 <code>@Retention(RetentionPolicy.CLASS/RetentionPolicy.RUNTIME/RetentionPolicy.SOURCE)</code> 。分别对应 java 编译执行过程的三个阶段。源代码阶段.java--&gt; 编译后的字节码阶段.class--&gt;JVM 运行时阶段.</p>\n<ul>\n<li>一般来说，普通开发者使用注解的时机都是运行时，比如反射读取注解（也有类似 Lombok 这类编译期注解）。既然反射是运行时调用，那就要求注解的信息必须保留到虚拟机将.class 文件加载到内存为止。如果你需要反射读取注解，却把保留策略设置为 RetentionPolicy.SOURCE、RetentionPolicy.CLASS</li>\n</ul>\n<h3 id=\"documented\"><a class=\"anchor\" href=\"#documented\">#</a> @Documented</h3>\n<p>用于制作文档</p>\n<h3 id=\"inherited\"><a class=\"anchor\" href=\"#inherited\">#</a> @Inherited</h3>\n<p>被该元注解修饰的自定义注解再使用后会自动继承，如果使用了该自定义注解去修饰一个 class 那么这个注解也会作用于该 class 的子类。就是说如果某个类使用了被 @Inherited 修饰的注解，则其子类将会自动具有该注释。@Inherited annotation 类型是被标注过的 class 的子类所继承。类并不从它所实现的接口继承 annotation，方法并不从它所重载的方法继承 annotation。</p>\n<h2 id=\"jdk中的标准注解\"><a class=\"anchor\" href=\"#jdk中的标准注解\">#</a> JDK 中的标准注解</h2>\n<h3 id=\"override\"><a class=\"anchor\" href=\"#override\">#</a> @Override</h3>\n<p>指示方法声明旨在覆盖超类型中的方法声明。如果使用此注解类型对方法进行注解，则编译器需要生成错误消息，除非至少满足以下条件之一：</p>\n<ul>\n<li>该方法确实覆盖或实现了在超类型中声明的方法。</li>\n<li>该方法的签名与 Object 中声明的任何公共方法的签名等效。</li>\n</ul>\n<p>所以 @Override 的作用告诉编译器检查这个方法，保证父类要包含一个被该方法重写的方法，否者就会出错，这样可以帮助程序员避免一些低级错误。</p>\n<h3 id=\"deprecated\"><a class=\"anchor\" href=\"#deprecated\">#</a> @Deprecated</h3>\n<p>注释的程序元素是不鼓励程序员使用的程序元素，通常是因为它很危险，或者因为存在更好的替代方案。当在非弃用代码中使用或覆盖弃用的程序元素时，编译器会发出警告。</p>\n<h3 id=\"suppresswarnings\"><a class=\"anchor\" href=\"#suppresswarnings\">#</a> @SuppressWarnings</h3>\n<p>指示应在带注释的元素（以及带注释的元素中包含的所有程序元素）中抑制命名的编译器警告。请注意，给定元素中抑制的警告集是所有包含元素中抑制的警告的超集。例如，如果您注释一个类以抑制一个警告并注释一个方法以抑制另一个警告，则两个警告都将在方法中被抑制。<br />\n作为风格问题，程序员应该始终在最有效的嵌套元素上使用此注释。如果您想在特定方法中抑制警告，您应该注释该方法而不是它的类。</p>\n<ul>\n<li>\n<p>Java 中的 @SuppressWarnings 注解指示被该注解修饰的程序元素（以及该程序元素中的所有子元素）取消显示指定的编译器警告，且会一直作用于该程序元素的所有子元素。</p>\n</li>\n<li>\n<p>如果你对于代码的规范不做要求又对编译器的警告感到烦躁那么你可以使用 @SuppressWarnings（仅仅只是取消显示，并没有消除），它可以让你免去这些烦恼，当然编译器报错他是无法帮你取消显示的。</p>\n</li>\n</ul>\n<h3 id=\"safevarargs\"><a class=\"anchor\" href=\"#safevarargs\">#</a> @SafeVarargs</h3>\n<p>程序员断言带注释的方法或构造函数的主体不会对其 varargs 参数执行潜在的不安全操作。将此注释应用于方法或构造函数会抑制有关不可具体化的变量 arity (vararg) 类型的未经检查的警告，并抑制有关在调用站点创建参数化数组的未经检查的警告。<br />\n除了 @Target 元注解施加的使用限制外，编译器还需要对该注解类型实施额外的使用限制；如果使用 @SafeVarargs 注释对方法或构造函数声明进行注释，则这是编译时错误，并且：<br />\n声明是一个固定的 arity 方法或构造函数<br />\n声明是一个既不是 static 也不是 final 的变量 arity 方法。<br />\n鼓励编译器在将此注释类型应用于方法或构造函数声明时发出警告，其中：<br />\n变量 arity 参数具有可具体化的元素类型，包括原始类型、 Object 和 String 。 （对于可具体化的元素类型，此注释类型抑制的未经检查的警告已经不会出现。）<br />\n方法或构造函数声明的主体执行潜在的不安全操作，例如对变量 arity 参数数组的元素的赋值会生成未经检查的警告。一些不安全的操作不会触发未经检查的警告。例如，别名在<br />\n @SafeVarargs // 实际上并不安全！<br />\nstatic void m(List&lt;String&gt;... stringLists) {<br />\nObject[] array = stringLists;<br />\nList&lt;Integer&gt; tmpList = Arrays.asList(42);<br />\narray [0] = tmpList; // 语义上无效，但可以编译<br />\n String s = stringLists [0].get (0); // 哦不，运行时的 ClassCastException！<br />\n}</p>\n<p>在运行时导致 ClassCastException 。<br />\n该平台的未来版本可能会要求此类不安全操作出现编译器错误。</p>\n<h3 id=\"functionalinterface\"><a class=\"anchor\" href=\"#functionalinterface\">#</a> @FunctionalInterface</h3>\n<p>一种信息性注解类型，用于指示接口类型声明旨在成为 Java 语言规范定义的功能接口。从概念上讲，函数式接口只有一个抽象方法。由于默认方法有一个实现，它们不是抽象的。如果接口声明了一个覆盖 java.lang.Object 的公共方法之一的抽象方法，这也不会计入接口的抽象方法计数，因为接口的任何实现都将具有来自 java.lang.Object 或其他地方的实现 (接口的实现是类，所有类的父类都是 Object)。<br />\n请注意，函数式接口的实例可以使用 lambda 表达式、方法引用或构造函数引用来创建。<br />\n如果使用此注解类型对类型进行注解，则编译器需要生成错误消息，除非：</p>\n<ul>\n<li>该类型是接口类型，而不是注解类型、枚举或类。</li>\n<li>带注解的类型满足功能接口的要求。</li>\n</ul>\n<p>但是，无论接口声明中是否存在 FunctionalInterface 注释，编译器都会将满足功能接口定义的任何接口视为功能接口。</p>\n<p>在学习 Lambda 表达式时，我们了解过函数式接口（接口中只有个一个抽象方法可以存在多个默认方法或多个 static 方法）。</p>\n<p>@FunctionalInterface 作用就是用来指定某一个接口必须是函数式接口的，所以 @FunctionalInterface 只能修饰接口。</p>\n<h2 id=\"spring框架下一个注解的实现\"><a class=\"anchor\" href=\"#spring框架下一个注解的实现\">#</a> Spring 框架下一个注解的实现</h2>\n<blockquote>\n<p>定义注解、使用注解、实现注解。和定义接口、使用接口、实现接口。与 OpenApi 中定义服务、使用服务、实现服务。具有相同的含义。</p>\n</blockquote>\n<h3 id=\"登录校验定义注解\"><a class=\"anchor\" href=\"#登录校验定义注解\">#</a> 登录校验 —— 定义注解</h3>\n<p>模拟是否需要进行登录校验；如果方法中加上了 @LoginRequired 注解表示方法需要登录校验，如果没加则不需要。定义一个</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@LoginRequired</span>注解</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">LoginRequired</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"登录校验使用注解\"><a class=\"anchor\" href=\"#登录校验使用注解\">#</a> 登录校验 —— 使用注解</h3>\n<p>定义两个简单接口，其中一个添加 @LoginRequired 注解表示需要登录校验</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TransDTO</span> <span class=\"token function\">login1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransDTO</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问login1成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@LoginRequired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TransDTO</span> <span class=\"token function\">login2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransDTO</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问login2成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"登录校验实现注解\"><a class=\"anchor\" href=\"#登录校验实现注解\">#</a> 登录校验 —— 实现注解</h3>\n<p>自定义拦截器。通过拦截器和反射，实现注解的处理逻辑。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问了过滤器！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">HandlerMethod</span> handlerMethod <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">HandlerMethod</span><span class=\"token punctuation\">)</span> handler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">LoginRequired</span> annotation <span class=\"token operator\">=</span> handlerMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginRequired</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 全局异常处理会进行处理</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BusinessException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"访问失败，您没有权限访问！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span>         <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span>     <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置拦截路径</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterceptorTrainConfigurer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPathPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>全局异常处理</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestControllerAdvice</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyExceptionAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TransDTO</span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransDTO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withSuccess</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自定义注解的场景有很多，比如登录、权限拦截、日志、以及各种框架。java 注解对于性能有较大的影响，但可用于软件的架构设计，实现动态加载，对于分解复杂业务有帮助。</p>\n",
            "tags": [
                "java",
                "Java"
            ]
        },
        {
            "id": "https://superjeason.github.io/2024/07/02/Java/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "url": "https://superjeason.github.io/2024/07/02/Java/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "title": "java流程控制",
            "date_published": "2024-07-02T15:34:29.000Z",
            "content_html": "<h1 id=\"流程控制\"><a class=\"anchor\" href=\"#流程控制\">#</a> 流程控制</h1>\n<h2 id=\"顺序结构\"><a class=\"anchor\" href=\"#顺序结构\">#</a> 顺序结构</h2>\n<p>java 的基本结构<br />\n<img loading=\"lazy\" data-src=\"https://i.111666.best/image/bCSkYcG7HbloWN6FseXcBw.png\" alt=\"\" title=\"顺序结构\" /></p>\n<h2 id=\"选择结构\"><a class=\"anchor\" href=\"#选择结构\">#</a> 选择结构</h2>\n<h3 id=\"if单选结构\"><a class=\"anchor\" href=\"#if单选结构\">#</a> if 单选结构</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是 if 语句\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"if-else结构\"><a class=\"anchor\" href=\"#if-else结构\">#</a> if-else 结构</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是 if 语句\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是 else 语句\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"if-else嵌套\"><a class=\"anchor\" href=\"#if-else嵌套\">#</a> if-else 嵌套</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">==</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> y <span class=\"token operator\">==</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X = 30 and Y = 10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"switch\"><a class=\"anchor\" href=\"#switch\">#</a> switch</h3>\n<ol>\n<li>\n<p>switch 语句中的变量类型可以是： byte、short、int 或者 char。</p>\n</li>\n<li>\n<p>从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。模式使用 String 的 hashCode 作为匹配方法。</p>\n</li>\n<li>\n<p>switch 不支持 long、float、double，是因为 switch 的设计初衷是对那些只有少数几个值的类型进行等值判断，如果值过于复杂，那么还是用 if 比较合适。</p>\n</li>\n<li>\n<p>case 穿透。如果 case 后没有 break 语句，则 case 条件成立后，会执行后续的所有代码，不会进行后续的判断。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">case</span> value <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可选</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">case</span> value <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可选</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 你可以有任意数量的 case 语句</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token comment\">// 可选</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"循环结构\"><a class=\"anchor\" href=\"#循环结构\">#</a> 循环结构</h2>\n<h3 id=\"while\"><a class=\"anchor\" href=\"#while\">#</a> while</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of x : \"</span> <span class=\"token operator\">+</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"dowhile-循环\"><a class=\"anchor\" href=\"#dowhile-循环\">#</a> do…while 循环</h3>\n<p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p>\n<p>do…while 循环和 while 循环相似，不同的是，do…while <strong>循环至少会执行一次</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of x : \"</span> <span class=\"token operator\">+</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a> for 循环</h3>\n<p>虽然所有循环结构都可以用 while 或者 do...while 表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</p>\n<p>for 循环执行的次数是在执行前就确定的。语法格式如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始化<span class=\"token punctuation\">;</span> 布尔表达式<span class=\"token punctuation\">;</span> 更新<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 代码语句</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">=</span> x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value of x : \"</span> <span class=\"token operator\">+</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"增强-for-循环\"><a class=\"anchor\" href=\"#增强-for-循环\">#</a> 增强 for 循环</h3>\n<p>用来遍历序列和集合。</p>\n<ul>\n<li>\n<p>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>\n</li>\n<li>\n<p>表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>声明语句 <span class=\"token operator\">:</span> 表达式<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token comment\">// 代码句子</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> numbers <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token class-name\">String</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Larry\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Lacy\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> names <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"breakcontinue\"><a class=\"anchor\" href=\"#breakcontinue\">#</a> break&amp;continue</h2>\n<h3 id=\"break-关键字\"><a class=\"anchor\" href=\"#break-关键字\">#</a> break 关键字</h3>\n<p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p>\n<p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> numbers <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token comment\">//x 等于 30 时跳出循环</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">==</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"continue-关键字\"><a class=\"anchor\" href=\"#continue-关键字\">#</a> continue 关键字</h3>\n<p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p>\n<p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p>\n<p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> numbers <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> x <span class=\"token operator\">==</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "java",
                "java",
                "流程控制"
            ]
        },
        {
            "id": "https://superjeason.github.io/2024/07/02/Java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",
            "url": "https://superjeason.github.io/2024/07/02/Java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/",
            "title": "java基础语法",
            "date_published": "2024-07-02T15:25:59.000Z",
            "content_html": "<h1 id=\"注释-标识符和关键字\"><a class=\"anchor\" href=\"#注释-标识符和关键字\">#</a> 注释、标识符和关键字</h1>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 单行注释</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>多行注释</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Java Doc 中的祖师格式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * /</span></pre></td></tr></table></figure><h2 id=\"标识符\"><a class=\"anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<p>标识变量、方法、类和对象的名字。</p>\n<ul>\n<li>所有的标识符都应该以字母（A-Z 或者 a-z）, 美元符（$）、或者下划线（_）开始</li>\n<li>首字符之后可以是字母（A-Z 或者 a-z）, 美元符（$）、下划线（_）或数字的任何字符组合</li>\n<li>关键字不能用作标识符</li>\n<li>标识符是大小写敏感的</li>\n</ul>\n<h2 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h2>\n<table>\n<thead>\n<tr>\n<th>abstract</th>\n<th>assert</th>\n<th>boolean</th>\n<th>break</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>case</td>\n<td>catch</td>\n<td>char</td>\n</tr>\n<tr>\n<td>class</td>\n<td>const</td>\n<td>continue</td>\n<td>default</td>\n</tr>\n<tr>\n<td>do</td>\n<td>double</td>\n<td>else</td>\n<td>enum</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>final</td>\n<td>finally</td>\n<td>float</td>\n</tr>\n<tr>\n<td>for</td>\n<td>goto</td>\n<td>if</td>\n<td>implements</td>\n</tr>\n<tr>\n<td>import</td>\n<td>instanceof</td>\n<td>int</td>\n<td>interface</td>\n</tr>\n<tr>\n<td>long</td>\n<td>native</td>\n<td>new</td>\n<td>package</td>\n</tr>\n<tr>\n<td>private</td>\n<td>protected</td>\n<td>public</td>\n<td>return</td>\n</tr>\n<tr>\n<td>short</td>\n<td>static</td>\n<td>strictfp</td>\n<td>super</td>\n</tr>\n<tr>\n<td>switch</td>\n<td>synchronized</td>\n<td>this</td>\n<td>throw</td>\n</tr>\n<tr>\n<td>throws</td>\n<td>transient</td>\n<td>try</td>\n<td>void</td>\n</tr>\n<tr>\n<td>volatile</td>\n<td>while</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<p>强类型语言，所有变量必须先定义后使用。可以分为</p>\n<ol>\n<li>基本类型</li>\n<li>引用类型</li>\n<li>基本类型对应的引用类型，称为包装类型</li>\n</ol>\n<h2 id=\"基本类型\"><a class=\"anchor\" href=\"#基本类型\">#</a> 基本类型</h2>\n<ul>\n<li>整数类型\n<ul>\n<li>byte/8</li>\n<li>short/16</li>\n<li>int/32</li>\n<li>long/64</li>\n</ul>\n</li>\n<li>浮点数类型\n<ul>\n<li>float/32</li>\n<li>double/64</li>\n</ul>\n</li>\n<li>字符类型\n<ul>\n<li>char/16</li>\n</ul>\n</li>\n<li>布尔类型\n<ul>\n<li>boolean/1</li>\n</ul>\n</li>\n</ul>\n<p>boolean 只有两个值：true、false，可以使用 1 bit 来存储，但是具体大小没有明确规定。JVM 会在编译时期将 boolean 类型的数据转换为 int，使用 1 来表示 true，0 表示 false。JVM 支持 boolean 数组，但是是通过读写 byte 数组来实现的。</p>\n<blockquote>\n<p>float 和 double 的比较问题</p>\n<ul>\n<li>java 里的相等判断是检查类型的。float 和 double 之间无法直接判断是否相等。</li>\n<li>float 和 double 采用科学技术发进行存储，对较大的值有很高的舍入误差。无法直接判断相等。</li>\n<li>银行业务中数据应该使用 BigDeceimal 来表示钱，防止舍入误差的影响。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>字符和数值类型可以相互转换</p>\n<ul>\n<li>所有字符类型可以强制转换为数字， 本质上也是一种数字。</li>\n<li>默认使用 unicode 编码，占用两个字节。<br />\n <code>char c = '\\u0061'</code>  表示字母 a。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>布尔类型</p>\n<pre><code>boolean flag = true;\nif(flag == true)&#123;&#125;\nif(flag)&#123;&#125;\n//代码精简\n</code></pre>\n</blockquote>\n<blockquote>\n<p>整数类型<br />\n 0b 二进制<br />\n 0 八进制<br />\n 0 十六进制</p>\n</blockquote>\n<h2 id=\"引用类型\"><a class=\"anchor\" href=\"#引用类型\">#</a> 引用类型</h2>\n<p>由基本数据类型按照某种方式组合出来的类型。</p>\n<ol>\n<li>类（随机组合变量和方法）</li>\n<li>接口（随机组合方法）</li>\n<li>数组（顺序排列的变量）</li>\n</ol>\n<h2 id=\"包装类型\"><a class=\"anchor\" href=\"#包装类型\">#</a> 包装类型</h2>\n<p>基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成。包装类型是基本类型对应的引用类型。</p>\n<ul>\n<li>byte,Byte</li>\n<li>short,Short</li>\n<li>int,Integer</li>\n<li>long,Long</li>\n<li>float,Float</li>\n<li>double,Double,</li>\n<li>char,Char</li>\n<li>boolean,Boolean</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 装箱 调用了 Integer.valueOf (2)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 拆箱 调用了 X.intValue ()</span></pre></td></tr></table></figure><ul>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html\">Autoboxing and Unboxing</a></li>\n</ul>\n<h3 id=\"字面值和转义字符\"><a class=\"anchor\" href=\"#字面值和转义字符\">#</a> 字面值和转义字符</h3>\n<ul>\n<li>不同进制的整数</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 十进制</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">0b00101</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 二进制</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">010</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 八进制</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0x10</span><span class=\"token comment\">// 十六进制</span></pre></td></tr></table></figure><ul>\n<li>不同编码的字符串</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">\"这是一个字符串\"</span><span class=\"token comment\">// 字符串的字面值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">\"\\u0061\"</span><span class=\"token comment\">//unnicode 编码的字符</span></pre></td></tr></table></figure><ul>\n<li>不同的转移字符</li>\n</ul>\n<pre><code>\\t 制表位\n\\n 换行符\n\\b 退格键\n\\r 回车\n\\'\n\\&quot;\n\\\\\n</code></pre>\n<h1 id=\"基本类型转换\"><a class=\"anchor\" href=\"#基本类型转换\">#</a> 基本类型转换</h1>\n<h2 id=\"转换规则\"><a class=\"anchor\" href=\"#转换规则\">#</a> 转换规则</h2>\n<p>运算中不同类型的数据首先转换为同一类型然后进行运算。</p>\n<ul>\n<li>默认转换规则</li>\n</ul>\n<pre><code>byte/short/char-&gt;int-&gt;long-&gt;float-&gt;double\n</code></pre>\n<ul>\n<li>自动类型转换，隐式类型转换，由低到高会自动进行类型转换</li>\n<li>强制类型转换，从高到低需要进行强制类型转换</li>\n</ul>\n<blockquote>\n<p>注意事项</p>\n<ul>\n<li>不能对布尔值进行转换</li>\n<li>不能把对象转换为不相关的类型</li>\n<li>转换的时候会存在内存溢出或者精度问题</li>\n</ul>\n</blockquote>\n<h2 id=\"float-与-double\"><a class=\"anchor\" href=\"#float-与-double\">#</a> float 与 double</h2>\n<p>Java 不能隐式执行向下转型，因为这会使得精度降低。</p>\n<p>1.1 字面量属于 double 类型，不能直接将 1.1 直接赋值给 float 变量，因为这是向下转型。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// float f = 1.1;</span></pre></td></tr></table></figure><p>1.1f 字面量才是 float 类型。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token number\">1.1f</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"隐式类型转换\"><a class=\"anchor\" href=\"#隐式类型转换\">#</a> 隐式类型转换</h2>\n<p>因为字面量 1 是 int 类型，它比 short 类型精度要高，因此不能隐式地将 int 类型向下转型为 short 类型。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">short</span> s1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// s1 = s1 + 1;</span></pre></td></tr></table></figure><p>但是使用 += 或者 ++ 运算符会执行隐式类型转换。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s1 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的语句相当于将 s1 + 1 的计算结果进行了向下转型：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"显示类型转换\"><a class=\"anchor\" href=\"#显示类型转换\">#</a> 显示类型转换</h2>\n<p><a href=\"https://stackoverflow.com/questions/8710619/why-dont-javas-compound-assignment-operators-require-casting\">StackOverflow : Why don't Java's +=, -=, *=, /= compound assignment operators require casting?</a></p>\n<h1 id=\"变量常量\"><a class=\"anchor\" href=\"#变量常量\">#</a> 变量常量</h1>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>可以变化的量。</p>\n<ol>\n<li>Java 是一种强类型语言，每个变量都必须声明其类型。</li>\n<li>Java 变量是程序中最基本的存储单元，其元素包括变量名，变量类型和作用域。</li>\n</ol>\n<pre><code>数据类型 变量名 = 变量值;\ntype varName [=value] [&#123;,varName[=value]&#125;];\n</code></pre>\n<blockquote>\n<p>不建议在一行中定义多个值。提高程序的可读性。</p>\n</blockquote>\n<h2 id=\"变量作用域\"><a class=\"anchor\" href=\"#变量作用域\">#</a> 变量作用域</h2>\n<ol>\n<li>类变量，static 修饰的变量</li>\n<li>实例变量，从属于对象的变量</li>\n<li>局部变量，方法中的变量</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Variable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 类变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 实例变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 局部变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>变量的范围是程序中该变量可以被引用的部分。</p>\n<ol>\n<li>方法内定义的变量被称为局部变量。局部变量的作用范围从声明开始，直到包含它的块结束。</li>\n<li>局部变量必须声明才可以使用。</li>\n<li>方法的参数范围涵盖整个方法。参数实际上是一个局部变量。</li>\n<li>for 循环的初始化部分声明的变量，其作用范围在整个循环。循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：</li>\n</ol>\n<h2 id=\"变量初始化\"><a class=\"anchor\" href=\"#变量初始化\">#</a> 变量初始化</h2>\n<p>实例变量初始化规则</p>\n<ol>\n<li>如果没有初始化函数默认初始化 Wie0</li>\n<li>布尔值默认是 false</li>\n<li>引用变量的默认初始值都是 null</li>\n</ol>\n<h2 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h2>\n<ol>\n<li>初始化后不能改变的值。</li>\n<li>特殊的变量，值被设定后不能进行改变。</li>\n<li>使用 final 声明常量。</li>\n</ol>\n<h2 id=\"变量的命名规则\"><a class=\"anchor\" href=\"#变量的命名规则\">#</a> 变量的命名规则</h2>\n<ol>\n<li>见名知意</li>\n<li>类成员变量、局部变量，首字母小写驼峰命名 helloWrold</li>\n<li>常量，大写字母 + 下划线 HELLO_WORLD</li>\n<li>类名，HelloWorld</li>\n<li>方法名，首字母小写 + 驼峰命名 helloWorld ()</li>\n</ol>\n<h1 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h1>\n<h2 id=\"算术运算符\"><a class=\"anchor\" href=\"#算术运算符\">#</a> 算术运算符</h2>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加法 - 相加运算符两侧的值</td>\n<td>A+B 等于 30</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减法 - 左操作数减去右操作数</td>\n<td>A–B 等于 - 10</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘法 - 相乘操作符两侧的值</td>\n<td>A*B 等于 200</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除法 - 左操作数除以右操作数</td>\n<td>B/A 等于 2</td>\n</tr>\n<tr>\n<td>％</td>\n<td>取余 - 左操作数除以右操作数的余数</td>\n<td>B% A 等于 0</td>\n</tr>\n<tr>\n<td>++</td>\n<td>自增：操作数的值增加 1</td>\n<td>B<ins> 或</ins> B 等于 21（区别详见下文）</td>\n</tr>\n<tr>\n<td>--</td>\n<td>自减：操作数的值减少 1</td>\n<td>B-- 或 --B 等于 19（区别详见下文）</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>前缀自增自减法 (++a,--a): 先进行自增或者自减运算，再进行表达式运算。</li>\n<li>后缀自增自减法 (a++,a--): 先进行表达式运算，再进行自增或者自减运算</li>\n</ol>\n<h2 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h2>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td>\n<td>（A == B）为假。</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>\n<td>(A != B) 为真。</td>\n</tr>\n<tr>\n<td>&gt; </td>\n<td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>\n<td>（A&gt; B）为假。</td>\n</tr>\n<tr>\n<td>&lt; </td>\n<td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>\n<td>（A &lt;B）为真。</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>\n<td>（A&gt; = B）为假。</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>\n<td>（A &lt;= B）为真。</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>基本类型的值可以直接使用关系运算符判断大小和相等。</li>\n<li>引用类型（类的对象、类的实例）的变量，需要通过重写 equals 方法来判断两个变量是否相等。引用类型的等于判断，是判断两个对象的地址是否相等。</li>\n</ol>\n<h2 id=\"位运算符\"><a class=\"anchor\" href=\"#位运算符\">#</a> 位运算符</h2>\n<p>Java 定义了位运算符，应用于整数类型 (int)，长整型 (long)，短整型 (short)，字符型 (char)，和字节型 (byte) 等类型。</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>＆</td>\n<td>如果相对应位都是 1，则结果为 1，否则为 0</td>\n<td>（A＆B），得到 12，即 0000 1100</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>如果相对应位都是 0，则结果为 0，否则为 1</td>\n</tr>\n<tr>\n<td>^</td>\n<td>如果相对应位值相同，则结果为 0，否则为 1</td>\n<td>（A ^ B）得到 49，即 0011 0001</td>\n</tr>\n<tr>\n<td>〜</td>\n<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0。</td>\n<td>（〜A）得到 - 61，即 1100 0011</td>\n</tr>\n<tr>\n<td>&lt;&lt; </td>\n<td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td>\n<td>A &lt;&lt; 2 得到 240，即 1111 0000</td>\n</tr>\n<tr>\n<td>&gt;&gt; </td>\n<td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td>\n<td>A &gt;&gt; 2 得到 15 即 1111</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt; </td>\n<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>\n<td>A&gt;&gt;&gt;2 得到 15 即 0000 1111</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>运算效率极高，可以用来实现高级的乘法、加法和指数运算。</li>\n</ul>\n<h2 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h2>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;&amp;</td>\n<td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>\n<td>（A&amp;&amp;B）为假。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<tbody>\n<tr>\n<td><code>||</code></td>\n<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>\n<td>（A <code>||</code> B）为真。</td>\n</tr>\n<tr>\n<td>！</td>\n<td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 true，则逻辑非运算符将得到 false。</td>\n<td>！（A&amp;&amp;B）为真。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>短路运算。当使用与逻辑运算符时，在两个操作数都为 true 时，结果才为 true，但是当得到第一个操作为 false 时，其结果就必定是 false，这时候就不会再判断第二个操作了。</li>\n</ul>\n<h2 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h2>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n<th>例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>简单的赋值运算符，将右操作数的值赋给左侧操作数</td>\n<td>C = A + B 将把 A + B 得到的值赋给 C</td>\n</tr>\n<tr>\n<td>+ =</td>\n<td>加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>\n<td>C + = A 等价于 C = C + A</td>\n</tr>\n<tr>\n<td>- =</td>\n<td>减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>\n<td>C - = A 等价于 C = C - A</td>\n</tr>\n<tr>\n<td>* =</td>\n<td>乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>\n<td>C * = A 等价于 C = C * A</td>\n</tr>\n<tr>\n<td>/ =</td>\n<td>除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>\n<td>C / = A，C 与 A 同类型时等价于 C = C / A</td>\n</tr>\n<tr>\n<td>（％）=</td>\n<td>取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>\n<td>C％= A 等价于 C = C％A</td>\n</tr>\n<tr>\n<td>&lt;&lt; =</td>\n<td>左移位赋值运算符</td>\n<td>C &lt;&lt; = 2 等价于 C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td>&gt;&gt; =</td>\n<td>右移位赋值运算符</td>\n<td>C &gt;&gt; = 2 等价于 C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td>＆=</td>\n<td>按位与赋值运算符</td>\n<td>C＆= 2 等价于 C = C＆2</td>\n</tr>\n<tr>\n<td>^ =</td>\n<td>按位异或赋值操作符</td>\n<td>C ^ = 2 等价于 C = C ^ 2</td>\n</tr>\n<tr>\n<td></td>\n<td>=</td>\n<td>按位或赋值操作符</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//java 变量相加，字符串后边都会转换为字符串拼接，字符串前边的执行变量的运算</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token operator\">+</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 1020</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//30</span></pre></td></tr></table></figure><h2 id=\"条件运算符\"><a class=\"anchor\" href=\"#条件运算符\">#</a> 条件运算符（?:）</h2>\n<p>条件运算符也被称为三元运算符。该运算符有 3 个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>\n<h2 id=\"instanceof-运算符\"><a class=\"anchor\" href=\"#instanceof-运算符\">#</a> instanceof 运算符</h2>\n<p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>\n<h2 id=\"运算符优先级\"><a class=\"anchor\" href=\"#运算符优先级\">#</a> 运算符优先级</h2>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>操作符</th>\n<th>关联性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>后缀</td>\n<td>() [] . (点操作符)</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>一元</td>\n<td>expr++  expr--</td>\n<td>从左到右</td>\n</tr>\n<tr>\n<td>一元</td>\n<td>++expr --expr + - ～ ！</td>\n<td>从右到左</td>\n</tr>\n<tr>\n<td>乘性 </td>\n<td>* /％</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>加性 </td>\n<td>+ -</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>移位 </td>\n<td>&gt;&gt; &gt;&gt;&gt;  &lt;&lt; </td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>关系 </td>\n<td>&gt;  &gt;=  &lt;  &lt;= </td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>相等 </td>\n<td>==  !=</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>按位与</td>\n<td>＆</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>按位异或</td>\n<td>^</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>按位或</td>\n<td><code>|</code></td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>逻辑与</td>\n<td>&amp;&amp;</td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>逻辑或</td>\n<td><code>| |</code></td>\n<td>左到右</td>\n</tr>\n<tr>\n<td>条件</td>\n<td>？：</td>\n<td>从右到左</td>\n</tr>\n<tr>\n<td>赋值</td>\n<td>= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ =</td>\n<td>=</td>\n</tr>\n<tr>\n<td>逗号</td>\n<td>，</td>\n<td>左到右</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"包机制和javadoc\"><a class=\"anchor\" href=\"#包机制和javadoc\">#</a> 包机制和 JavaDoc</h1>\n<h2 id=\"包机制\"><a class=\"anchor\" href=\"#包机制\">#</a> 包机制</h2>\n<ol>\n<li>包是一种文件夹。利用公司域名倒置作为包名 package</li>\n<li>包是默认的作用域。当前类会自动导入当前包作用域中的类和变量。</li>\n<li>通过导入包中的类，可以使用其他包中的类。import</li>\n</ol>\n<h2 id=\"javadoc\"><a class=\"anchor\" href=\"#javadoc\">#</a> JavaDoc</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @since 1.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Doc</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   * @param</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   * @return</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   * @throws</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "java",
                "java",
                "语法"
            ]
        },
        {
            "id": "https://superjeason.github.io/2024/07/01/STL/STL%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8F%8A%E7%AE%97%E6%B3%95/",
            "url": "https://superjeason.github.io/2024/07/01/STL/STL%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8F%8A%E7%AE%97%E6%B3%95/",
            "title": "STL迭代器及算法",
            "date_published": "2024-07-01T07:29:02.000Z",
            "content_html": "<h1 id=\"迭代器简介\"><a class=\"anchor\" href=\"#迭代器简介\">#</a> 迭代器简介</h1>\n<h2 id=\"迭代器是什么\"><a class=\"anchor\" href=\"#迭代器是什么\">#</a> 迭代器是什么？</h2>\n<p>不搞抽象，直接举例。</p>\n<p>对于一个 vector，我们可以用下标遍历：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们同时也可以用迭代器来遍历：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>a.begin()</code>  是一个迭代器，指向的是第一个元素</li>\n<li><code>a.end()</code>  是一个迭代器，指向的是最后一个元素<strong>再后面一位</strong></li>\n<li>上述迭代器具有自增运算符，自增则迭代器向下一个元素移动</li>\n<li>迭代器与指针相似，如果对它使用解引用运算符，即  <code>*it</code> ，就能取到对应值了</li>\n</ul>\n<h2 id=\"为何需要迭代器\"><a class=\"anchor\" href=\"#为何需要迭代器\">#</a> 为何需要迭代器？</h2>\n<p>很多数据结构并不是线性的（例如红黑树），对于非线性数据结构，下标是无意义的。无法使用下标来遍历整个数据结构。</p>\n<p>迭代器的作用就是定义某个数据结构的遍历方式，通过迭代器的增减，代表遍历到的位置，通过迭代器便能成功遍历非线性结构了。</p>\n<p>例如，set 的实现是红黑树，我们是没法用下标来访问元素的。但是通过迭代器，我们就能遍历 set 中的元素了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"迭代器用法\"><a class=\"anchor\" href=\"#迭代器用法\">#</a> 迭代器用法</h2>\n<p>对于 vector 容器，它的迭代器功能比较完整，以它举例：</p>\n<ul>\n<li><code>.begin()</code> ：头迭代器</li>\n<li><code>.end()</code> ：尾迭代器</li>\n<li><code>.rbegin()</code> ：反向头迭代器</li>\n<li><code>.rend()</code> ：反向尾迭代器</li>\n<li>迭代器  <code>+</code>  整型：将迭代器向后移动</li>\n<li>迭代器  <code>-</code>  整型：将迭代器向前移动</li>\n<li>迭代器  <code>++</code> ：将迭代器向后移动 1 位</li>\n<li>迭代器  <code>--</code> ：将迭代器向前移动 1 位</li>\n<li>迭代器  <code>-</code>  迭代器：两个迭代器的距离</li>\n<li><code>prev(it)</code> ：返回 it 的前一个迭代器</li>\n<li><code>next(it)</code> ：返回 it 的后一个迭代器</li>\n</ul>\n<p>对于其他容器，由于其结构特性，上面的功能不一定都有（例如 set 的迭代器是不能相减求距离的）</p>\n<h2 id=\"常见问题\"><a class=\"anchor\" href=\"#常见问题\">#</a> 常见问题</h2>\n<p><strong> <code>.end()</code>  和  <code>.rend()</code>  指向的位置是无意义的值</strong></p>\n<p>对于一个长度为 10 的数组： <code>for (int i = 0; i &lt; 10; i++)</code> ，第 10 位是不可访问的</p>\n<p>对于一个长度为 10 的容器： <code>for (auto it = a.begin(); it != a.end(); ++it)</code> ，.end 是不可访问的</p>\n<p><strong>不同容器的迭代器功能可能不一样</strong></p>\n<p>迭代器细化的话有正向、反向、双向，每个容器的迭代器支持的运算符也可能不同，因此不同容器的迭代器细节很有可能是不一样的。</p>\n<p><strong>删除操作时需要警惕</strong></p>\n<p>为什么 3 没删掉？</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// a = [1, 3, 4]</span></pre></td></tr></table></figure><p>为啥 RE 了？</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>&lt;center&gt;&lt;b &gt; 建议：如无必要，别用迭代器操作容器。（遍历与访问没关系）&lt;/b&gt;&lt;/center&gt;</p>\n<h1 id=\"常用算法\"><a class=\"anchor\" href=\"#常用算法\">#</a> 常用算法</h1>\n<h2 id=\"内容总览\"><a class=\"anchor\" href=\"#内容总览\">#</a> 内容总览</h2>\n<p>打勾的是本次将会详细讲解的，其他的是算法竞赛中建议学习的，不在下表列出的在比赛中基本用不到。</p>\n<p>（很多函数的功能很简单，自己都能快速写出来，但是使用函数可以让代码可读性变得更高，这在比赛中是至关紧要的）</p>\n<ul>\n<li>\n<p>算法库 Algorithm</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\">  <code>count()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" disabled=\"true\" /><label for=\"cbx_1\">  <code>find()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\">  <code>fill()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_3\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_3\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/swap\"> <code>swap()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_4\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_4\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/reverse\"> <code>reverse()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" disabled=\"true\" /><label for=\"cbx_5\">  <code>shuffle()</code>  C++11</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_6\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/unique\"> <code>unique()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_7\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/sort\"> <code>sort()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_8\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/lower_bound\"> <code>lower_bound()</code> </a> / <a href=\"https://zh.cppreference.com/w/cpp/algorithm/upper_bound\"> <code>upper_bound()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_9\"> <a href=\"https://zh.cppreference.com/w/cpp/algorithm/max\"> <code>max()</code> </a> / <a href=\"https://zh.cppreference.com/w/cpp/algorithm/min\"> <code>min()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\" /><label for=\"cbx_10\">  <code>max_element()</code>  /  <code>min_element()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\" /><label for=\"cbx_11\">  <code>prev_permutation()</code>  /  <code>next_permutation()</code> </label></li>\n</ul>\n</li>\n<li>\n<p>数学函数 cmath</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_12\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/fabs\"> <code>abs()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_13\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/exp\"> <code>exp()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_14\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/log\"> <code>log()</code> </a> /  <code>log10()</code>  /  <code>log2()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_15\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/pow\"> <code>pow()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_16\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_16\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/sqrt\"> <code>sqrt()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_17\" disabled=\"true\" /><label for=\"cbx_17\">  <code>sin()</code>  /  <code>cos()</code>  /  <code>tan()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_18\" disabled=\"true\" /><label for=\"cbx_18\">  <code>asin()</code>  /  <code>acos()</code>  /  <code>atan()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_19\" disabled=\"true\" /><label for=\"cbx_19\">  <code>sinh()</code>  /  <code>cosh()</code>  /  <code>tanh()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_20\" disabled=\"true\" /><label for=\"cbx_20\">  <code>asinh()</code>  /  <code>acosh()</code>  /  <code>atanh()</code>  C++11</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_21\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_21\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/ceil\"> <code>ceil()</code> </a> / <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/floor\"> <code>floor()</code> </a></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_22\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_22\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/math/round\"> <code>round()</code> </a> C++11</label></li>\n</ul>\n</li>\n<li>\n<p>数值算法 numeric</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_23\" disabled=\"true\" /><label for=\"cbx_23\">  <code>iota()</code>  C++11</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_24\" disabled=\"true\" /><label for=\"cbx_24\">  <code>accumulate()</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_25\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_25\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/gcd\"> <code>gcd()</code> </a> C++17</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_26\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_26\"> <a href=\"https://zh.cppreference.com/w/cpp/numeric/lcm\"> <code>lcm()</code> </a> C++17</label></li>\n</ul>\n</li>\n<li>\n<p>伪随机数生成 random</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_27\" disabled=\"true\" /><label for=\"cbx_27\">  <code>mt19937</code> </label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_28\" disabled=\"true\" /><label for=\"cbx_28\">  <code>random_device()</code> </label></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"swap\"><a class=\"anchor\" href=\"#swap\">#</a>  <code>swap()</code></h2>\n<p>交换两个变量的值</p>\n<p><strong>用法示例</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span> T<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> T<span class=\"token operator\">&amp;</span> b <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// now a = 1, b = 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// now arr = &#123;0, 1, 2, 3, 6, 5, 4, 7, 8, 9&#125;</span></pre></td></tr></table></figure><p><strong>注意事项</strong></p>\n<p>这个 swap 参数是引用的，不需要像 C 语言一样取地址。</p>\n<h2 id=\"sort\"><a class=\"anchor\" href=\"#sort\">#</a>  <code>sort()</code></h2>\n<p>使用快速排序给一个可迭代对象排序</p>\n<p><strong>用法示例</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomIt</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Compare</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span> RandomIt first<span class=\"token punctuation\">,</span> RandomIt last<span class=\"token punctuation\">,</span> Compare comp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>默认排序从小到大</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// arr = [0, 1, 1, 1, 8, 9, 9]</span></pre></td></tr></table></figure><p>如果要从大到小，则需要传比较器进去。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// arr = [9, 9, 8, 1, 1, 1, 0]</span></pre></td></tr></table></figure><p>如果需要完成特殊比较，则需要手写比较器。</p>\n<p>比较器函数返回值是 bool 类型，传参是需要比较的两个元素。记我们定义的该比较操作为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋆</mo></mrow><annotation encoding=\"application/x-tex\">\\star</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord\">⋆</span></span></span></span>：</p>\n<ul>\n<li>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋆</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\star b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋆</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，则比较器函数应当返回  <code>true</code></li>\n<li>若 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋆̸</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a\\not\\star b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord\">⋆</span><span class=\"mord mathnormal\">b</span></span></span></span>，则比较器函数应当返回  <code>false</code></li>\n</ul>\n<p>** 注意：** 如果 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a=b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>，比较器函数必须返回  <code>false</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>second <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>first <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">>></span> arr<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// arr = [(0, 0), (8, 1), (2, 9), (1, 9)]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"lower_bound-upper_bound\"><a class=\"anchor\" href=\"#lower_bound-upper_bound\">#</a>  <code>lower_bound()</code>  /  <code>upper_bound()</code></h2>\n<p>在<strong>已升序排序</strong>的元素中，应用二分查找检索指定元素，返回对应元素迭代器位置。<strong>找不到则返回尾迭代器。</strong></p>\n<ul>\n<li><code>lower_bound()</code> : 寻找 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\geq x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的第一个元素的位置</li>\n<li><code>upper_bound()</code> : 寻找 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&gt;</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">&gt;x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的第一个元素的位置</li>\n</ul>\n<p>怎么找 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\leq x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> / <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">&lt; x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的第一个元素呢？</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&gt;</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">&gt;x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的第一个元素的前一个元素（如果有）便是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≤</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\leq x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的第一个元素</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\geq x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的第一个元素的前一个元素（如果有）便是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">&lt;x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 的第一个元素</li>\n</ul>\n<p>返回的是迭代器，如何转成下标索引呢？减去头迭代器即可。</p>\n<p><strong>用法示例</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForwardIt</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ForwardIt <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span> ForwardIt first<span class=\"token punctuation\">,</span> ForwardIt last<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> it <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// idx = 4</span></pre></td></tr></table></figure><p>我们通常写成一行：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>idx <span class=\"token operator\">=</span> <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>idx <span class=\"token operator\">=</span> <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>idx <span class=\"token operator\">=</span> <span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>idx <span class=\"token operator\">=</span> <span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></pre></td></tr></table></figure><h2 id=\"reverse\"><a class=\"anchor\" href=\"#reverse\">#</a>  <code>reverse()</code></h2>\n<p>反转一个可迭代对象的元素顺序</p>\n<p><strong>用法示例</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BidirIt</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span> BidirIt first<span class=\"token punctuation\">,</span> BidirIt last <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">iota</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 10, 9, 8, 7, 6, 5, 4, 3, 2, 1</span></pre></td></tr></table></figure><h2 id=\"max-min\"><a class=\"anchor\" href=\"#max-min\">#</a>  <code>max()</code>  /  <code>min()</code></h2>\n<p>返回最大值 / 最小值的<strong>数值</strong></p>\n<p><strong>用法示例</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>在 C++11 之后，可以使用列表构造语法传入一个列表，这样就能一次性给多个元素找最大值而不用套娃了：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Before C++11</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// After C++11</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> mx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> mn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><h2 id=\"unique\"><a class=\"anchor\" href=\"#unique\">#</a>  <code>unique()</code></h2>\n<p>消除数组的重复<strong>相邻</strong>元素，数组长度不变，但是有效数据缩短，返回的是有效数据位置的结尾迭代器。</p>\n<p>例如：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mo>→</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><munder accentunder=\"true\"><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">?</mo><mo stretchy=\"true\">‾</mo></munder><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,1,4,5,1,4]\\to[1,4,5,1,4,\\underline?]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mclose\">?</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>，下划线位置为返回的迭代器指向。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ForwardIt</span> <span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ForwardIt <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span> ForwardIt first<span class=\"token punctuation\">,</span> ForwardIt last <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>用法示例</strong></p>\n<p>单独使用 unique 并不能达成去重效果，因为它只消除<strong>相邻</strong>的重复元素。但是如果序列有序，那么它就能去重了。</p>\n<p>但是它去重后，序列尾部会产生一些无效数据：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">]</mo><mo>→</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><munder accentunder=\"true\"><mo stretchy=\"false\" lspace=\"0em\" rspace=\"0em\">?</mo><mo stretchy=\"true\">‾</mo></munder><mo separator=\"true\">,</mo><mo stretchy=\"false\">?</mo><mo separator=\"true\">,</mo><mo stretchy=\"false\">?</mo><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,1,2,4,4,4,5]\\to[1,2,4,5,\\underline?,?,?]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord underline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6944em;\"><span style=\"top:-2.84em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"underline-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mclose\">?</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2em;\"><span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mclose\">?</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mclose\">?]</span></span></span></span>，为了删掉这些无效数据，我们需要结合 erase.</p>\n<p>最终，给 vector 去重的写法便是：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"数学函数\"><a class=\"anchor\" href=\"#数学函数\">#</a> 数学函数</h2>\n<p>所有函数参数均支持  <code>int</code>  /  <code>long long</code>  /  <code>float</code>  /  <code>double</code>  /  <code>long double</code></p>\n<table>\n<thead>\n<tr>\n<th>公式</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">∣</mo><mi>x</mi><mo stretchy=\"false\">∣</mo></mrow><annotation encoding=\"application/x-tex\">f(x)=\\lvert x\\rvert</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">∣</span></span></span></span></td>\n<td><code>abs(-1.0)</code></td>\n</tr>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>e</mi><mi>x</mi></msup></mrow><annotation encoding=\"application/x-tex\">f(x)=e^x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span></span></span></span></span></span></span></span></td>\n<td><code>exp(2)</code></td>\n</tr>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>ln</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">f(x)=\\ln x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mop\">ln</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></td>\n<td><code>log(3)</code></td>\n</tr>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>x</mi><mi>y</mi></msup></mrow><annotation encoding=\"application/x-tex\">f(x,y)=x^y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></span></span></span></span></span></span></td>\n<td><code>pow(2, 3)</code></td>\n</tr>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><msqrt><mi>x</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">f(x)=\\sqrt x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.2397em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">x</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span></span></span></span></td>\n<td><code>sqrt(2)</code></td>\n</tr>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">⌈</mo><mi>x</mi><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">f(x)=\\lceil x\\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">⌉</span></span></span></span></td>\n<td><code>ceil(2.1)</code></td>\n</tr>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">⌊</mo><mi>x</mi><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">f(x)=\\lfloor x\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">⌋</span></span></span></span></td>\n<td><code>floor(2.1)</code></td>\n</tr>\n<tr>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">&lt;</mo><mi>x</mi><mo fence=\"true\">&gt;</mo></mrow></mrow><annotation encoding=\"application/x-tex\">f(x)=\\left&lt;x\\right&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">⟨</span><span class=\"mord mathnormal\">x</span><span class=\"mclose delimcenter\" style=\"top:0em;\">⟩</span></span></span></span></span></td>\n<td><code>rount(2.1)</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意事项</strong></p>\n<p>由于浮点误差，有些的数学函数的行为可能与预期不符，导致 WA。如果你的操作数都是整型，那么用下面的写法会更稳妥。</p>\n<blockquote>\n<p>原文地址：<a href=\"https://codeforces.com/blog/entry/107717\">https://codeforces.com/blog/entry/107717</a></p>\n</blockquote>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\frac{a}{b}\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.095em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span>\n<ul>\n<li>别用： <code>floor(1.0 * a / b)</code></li>\n<li>要用： <code>a / b</code></li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy=\"false\">⌉</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil\\frac{a}{b}\\rceil</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.095em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌉</span></span></span></span>\n<ul>\n<li>别用： <code>ceil(1.0 * a / b)</code></li>\n<li>要用： <code>(a + b - 1) / b</code>   （<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌈</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy=\"false\">⌉</mo><mo>=</mo><mo stretchy=\"false\">⌊</mo><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>−</mo><mn>1</mn></mrow><mi>b</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lceil\\frac{a}{b}\\rceil=\\lfloor\\frac{a+b-1}{b}\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.095em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌈</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6954em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌉</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2251em;vertical-align:-0.345em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8801em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mbin mtight\">+</span><span class=\"mord mathnormal mtight\">b</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span>）</li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><msqrt><mi>a</mi></msqrt><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\sqrt a\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0503em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">a</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mclose\">⌋</span></span></span></span>\n<ul>\n<li>别用： <code>(int) sqrt(a)</code></li>\n<li>要用：二分查找 <a href=\"https://io.zouht.com/7.html\">https://io.zouht.com/7.html</a></li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">b</span></span></span></span></span></span></span></span></span></span></span>\n<ul>\n<li>别用： <code>pow(a, b)</code></li>\n<li>要用：快速幂 <a href=\"https://io.zouht.com/18.html\">https://io.zouht.com/18.html</a></li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>a</mi><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor\\log_2 a\\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⌊</span><span class=\"mop\"><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.207em;\"><span style=\"top:-2.4559em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2441em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">⌋</span></span></span></span>\n<ul>\n<li>别用： <code>log2(a)</code></li>\n<li>要用： <code>__lg</code>  （不规范，但是这是竞赛）/  <code>bit_width</code> （C++20 可用）</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"gcd-lcm\"><a class=\"anchor\" href=\"#gcd-lcm\">#</a>  <code>gcd()</code>  /  <code>lcm()</code></h2>\n<p>（C++17）返回最大公因数 / 最小公倍数</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">lcm</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 24</span></pre></td></tr></table></figure><p>如果不是 C<ins>17，但是是 GNU 编译器（g</ins>），那么可以用内置函数  <code>__gcd()</code> .</p>\n<p>当然， <code>gcd</code>  /  <code>lcm</code>  函数也挺好写，直接写也行（欧几里得算法）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">lcm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "STL",
                "STL",
                "C++",
                "算法"
            ]
        },
        {
            "id": "https://superjeason.github.io/2024/07/01/STL/STL%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8/",
            "url": "https://superjeason.github.io/2024/07/01/STL/STL%E5%B8%B8%E7%94%A8%E5%AE%B9%E5%99%A8/",
            "title": "STL常用容器",
            "date_published": "2024-07-01T07:28:52.000Z",
            "content_html": "<p><strong>C++ 标准模板库 (STL, Standard Template Library)</strong>：包含一些常用数据结构与算法的模板的 C++ 软件库。其包含四个组件 —— 算法 (Algorithms)、容器 (Containers)、仿函数 (Functors)、迭代器 (Iterators).</p>\n<p><span id=\"more\"></span></p>\n<p>示例：</p>\n<ul>\n<li>算法： <code>sort(a.begin(), a.end())</code></li>\n<li>容器： <code>priority_queue&lt;int&gt; pque</code></li>\n<li>仿函数： <code>greater&lt;int&gt;()</code></li>\n<li>迭代器： <code>vector&lt;int&gt;::iterator it = a.begin()</code></li>\n</ul>\n<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>STL 作为一个封装良好，性能合格的 C++ 标准库，在算法竞赛中运用极其常见。灵活且正确使用 STL 可以节省非常多解题时间，这一点不仅是由于可以直接调用，还是因为它封装良好，可以让代码的可读性变高，解题思路更清晰，调试过程 <s>往往</s> 更顺利。</p>\n<p>不过 STL 毕竟使用了很多复杂的结构来实现丰富的功能，它的效率往往是比不上自己手搓针对特定题目的数据结构与算法的。因此，STL 的使用相当于使用更长的运行时间换取更高的编程效率。因此，在实际比赛中要权衡 STL 的利弊，不过这一点就得靠经验了。</p>\n<p>接下来，我会分享在算法竞赛中常用的 STL 容器和算法，对于函数和迭代器，就不着重展开讲了。</p>\n<h1 id=\"常用容器\"><a class=\"anchor\" href=\"#常用容器\">#</a> 常用容器</h1>\n<h2 id=\"内容总览\"><a class=\"anchor\" href=\"#内容总览\">#</a> 内容总览</h2>\n<p>打勾的是本次将会详细讲解的，加粗的是算法竞赛中有必要学习的。</p>\n<ul>\n<li>\n<p>顺序容器</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> <strong>array</strong></label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> <strong>vector</strong></label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_2\" disabled=\"true\" /><label for=\"cbx_2\"> <strong>deque</strong></label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_3\" disabled=\"true\" /><label for=\"cbx_3\"> forward_list</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_4\" disabled=\"true\" /><label for=\"cbx_4\"> <strong>list</strong></label></p>\n</li>\n</ul>\n</li>\n<li>\n<p>关联容器</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_5\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_5\"> <strong>set</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_6\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_6\"> <strong>map</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_7\" disabled=\"true\" /><label for=\"cbx_7\"> <strong>multiset</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_8\" disabled=\"true\" /><label for=\"cbx_8\"> <strong>multimap</strong></label></li>\n</ul>\n</li>\n<li>\n<p>无序关联容器</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_9\" disabled=\"true\" /><label for=\"cbx_9\"> <strong>unordered_set</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_10\" disabled=\"true\" /><label for=\"cbx_10\"> <strong>unordered_map</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_11\" disabled=\"true\" /><label for=\"cbx_11\"> <strong>unordered_multiset</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_12\" disabled=\"true\" /><label for=\"cbx_12\"> <strong>unordered_multimap</strong></label></li>\n</ul>\n</li>\n<li>\n<p>容器适配器</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_13\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_13\"> <strong>stack</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_14\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_14\"> <strong>queue</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_15\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_15\"> <strong>priority_queue</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_16\" disabled=\"true\" /><label for=\"cbx_16\"> flat_set</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_17\" disabled=\"true\" /><label for=\"cbx_17\"> flat_map</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_18\" disabled=\"true\" /><label for=\"cbx_18\"> flat_multiset</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_19\" disabled=\"true\" /><label for=\"cbx_19\"> flat_multimap</label></li>\n</ul>\n</li>\n<li>\n<p>字符串</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_20\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_20\"> <strong>string</strong> (basic_string&lt;char&gt;)</label></li>\n</ul>\n</li>\n<li>\n<p>对与元组</p>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_21\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_21\"> <strong>pair</strong></label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_22\" disabled=\"true\" /><label for=\"cbx_22\"> <strong>tuple</strong></label></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"向量-vector\"><a class=\"anchor\" href=\"#向量-vector\">#</a> 向量 <a href=\"https://zh.cppreference.com/w/cpp/container/vector\">vector</a></h2>\n<p><strong> <code>#include &lt;vector&gt;</code> </strong></p>\n<p>连续的顺序的储存结构（和数组一样的类别），但是有长度可变的特性。</p>\n<h3 id=\"常用方法\"><a class=\"anchor\" href=\"#常用方法\">#</a> 常用方法</h3>\n<h4 id=\"构造\"><a class=\"anchor\" href=\"#构造\">#</a> 构造</h4>\n<p><strong> <code>vector&lt;类型&gt; arr(长度, [初值])</code> </strong></p>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>常用的一维和二维数组构造示例，高维也是一样的（就是会有点长）.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 构造 int 数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 构造初始长 100 的 int 数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 构造初始长 100 的 int 数组，初值为 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">mat</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 构造初始 100 行，不指定列数的二维数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">mat</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 构造初始 100 行，初始 666 列的二维数组，初值为 - 1</span></pre></td></tr></table></figure><p>构造二维数组的奇葩写法，千万别用：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 正确，构造初始 100 行，不指定列数的二维数组，可用于链式前向星存图</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 语法错误！</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">arr</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 语法错误！</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确但奇葩，使用列表初始化</span></pre></td></tr></table></figure><h4 id=\"尾接-尾删\"><a class=\"anchor\" href=\"#尾接-尾删\">#</a> 尾接 &amp; 尾删</h4>\n<ul>\n<li><strong> <code>.push_back(元素)</code> </strong>：在 vector 尾接一个元素，数组长度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">1</span></span></span></span>.</li>\n<li><strong> <code>.pop_back()</code> </strong>：删除 vector 尾部的一个元素，数组长度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n<p>时间复杂度：均摊 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// init: arr = []</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// after: arr = [1]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// after: arr = [1, 2]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// after: arr = [1]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// after: arr = []</span></pre></td></tr></table></figure><h4 id=\"中括号运算符\"><a class=\"anchor\" href=\"#中括号运算符\">#</a> 中括号运算符</h4>\n<p>和一般数组一样的作用</p>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<h4 id=\"获取长度\"><a class=\"anchor\" href=\"#获取长度\">#</a> 获取长度</h4>\n<p><strong> <code>.size()</code> </strong></p>\n<p>获取当前 vector 的长度</p>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"清空\"><a class=\"anchor\" href=\"#清空\">#</a> 清空</h4>\n<p><strong> <code>.clear()</code> </strong></p>\n<p>清空 vector</p>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h4 id=\"判空\"><a class=\"anchor\" href=\"#判空\">#</a> 判空</h4>\n<p><strong> <code>.empty()</code> </strong></p>\n<p>如果是空返回  <code>true</code>  反之返回  <code>false</code> .</p>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<h4 id=\"改变长度\"><a class=\"anchor\" href=\"#改变长度\">#</a> 改变长度</h4>\n<p><strong> <code>.resize(新长度, [默认值])</code> </strong></p>\n<p>修改 vector 的长度</p>\n<ul>\n<li>如果是缩短，则删除多余的值</li>\n<li>如果是扩大，且指定了默认值，则新元素均为默认值 **（旧元素不变）**</li>\n</ul>\n<p>时间复杂度：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"适用情形\"><a class=\"anchor\" href=\"#适用情形\">#</a> 适用情形</h3>\n<p>一般情况  <code>vector</code>  可以替换掉普通数组，除非该题卡常。</p>\n<p>有些情况普通数组没法解决：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n\\times m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 的矩阵，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">1\\leq n,m\\leq 10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span> 且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>m</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">n\\times m \\leq 10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>如果用普通数组  <code>int mat[1000010][1000010]</code> ，浪费内存，会导致 MLE。</li>\n<li>如果使用  <code>vector&lt;vector&lt;int&gt;&gt; mat(n + 10, vector&lt;int&gt; (m + 10))</code> ，完美解决该问题。</li>\n</ul>\n<p>另外， <code>vector</code>  的数据储存在堆空间中，不会爆栈。</p>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<h4 id=\"提前指定长度\"><a class=\"anchor\" href=\"#提前指定长度\">#</a> 提前指定长度</h4>\n<p>如果长度已经确定，那么应当直接在构造函数指定长度，而不是一个一个  <code>.push_back()</code> . 因为  <code>vector</code>  额外内存耗尽后的重分配是有时间开销的，直接指定长度就不会出现重分配了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 优化前: 522ms</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1e8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 优化后: 259ms</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"当心-size_t-溢出\"><a class=\"anchor\" href=\"#当心-size_t-溢出\">#</a> 当心 size_t 溢出</h4>\n<p>vector 获取长度的方法  <code>.size()</code>  返回值类型为  <code>size_t</code> ，通常 OJ 平台使用的是 32 位编译器（有些平台例如 cf 可选 64 位），那么该类型范围为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><msup><mn>2</mn><mn>32</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[0,2^{32})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">65536</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接溢出变成 0 了</span></pre></td></tr></table></figure><h2 id=\"栈-stack\"><a class=\"anchor\" href=\"#栈-stack\">#</a> 栈 <a href=\"https://zh.cppreference.com/w/cpp/container/stack\">stack</a></h2>\n<p><strong> <code>#include &lt;stack&gt;</code> </strong></p>\n<p>通过二次封装双端队列 (deque) 容器，实现先进后出的栈数据结构。</p>\n<h3 id=\"常用方法-2\"><a class=\"anchor\" href=\"#常用方法-2\">#</a> 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>构造</td>\n<td><code>stack&lt;类型&gt; stk</code></td>\n<td><code>stack&lt;int&gt; stk;</code></td>\n</tr>\n<tr>\n<td>进栈</td>\n<td><code>.push(元素)</code></td>\n<td><code>stk.push(1);</code></td>\n</tr>\n<tr>\n<td>出栈</td>\n<td><code>.pop()</code></td>\n<td><code>stk.pop();</code></td>\n</tr>\n<tr>\n<td>取栈顶</td>\n<td><code>.top()</code></td>\n<td><code>int a = stk.top();</code></td>\n</tr>\n<tr>\n<td>查看大小 / 清空 / 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"适用情形-2\"><a class=\"anchor\" href=\"#适用情形-2\">#</a> 适用情形</h3>\n<p>如果不卡常的话，就可以直接用它而不需要手写栈了。</p>\n<p>另外，vector 也可以当栈用，vector 的  <code>.back()</code>  取尾部元素，就相当于取栈顶， <code>.push_back()</code>  相当于进栈， <code>.pop_back()</code>  相当于出栈。</p>\n<h3 id=\"注意事项-2\"><a class=\"anchor\" href=\"#注意事项-2\">#</a> 注意事项</h3>\n<p>不可访问内部元素！<strong>下面都是错误用法</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> stk<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> stk<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> ele <span class=\"token operator\">:</span> stk<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> stk <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"队列-queue\"><a class=\"anchor\" href=\"#队列-queue\">#</a> 队列 <a href=\"https://zh.cppreference.com/w/cpp/container/queue\">queue</a></h2>\n<p><strong> <code>#include &lt;queue&gt;</code> </strong></p>\n<p>通过二次封装双端队列 (deque) 容器，实现先进先出的队列数据结构。</p>\n<h3 id=\"常用方法-3\"><a class=\"anchor\" href=\"#常用方法-3\">#</a> 常用方法</h3>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>构造</td>\n<td><code>queue&lt;类型&gt; que</code></td>\n<td><code>queue&lt;int&gt; que;</code></td>\n</tr>\n<tr>\n<td>进队</td>\n<td><code>.push(元素)</code></td>\n<td><code>que.push(1);</code></td>\n</tr>\n<tr>\n<td>出队</td>\n<td><code>.pop()</code></td>\n<td><code>que.pop();</code></td>\n</tr>\n<tr>\n<td>取队首</td>\n<td><code>.front()</code></td>\n<td><code>int a = que.front();</code></td>\n</tr>\n<tr>\n<td>取队尾</td>\n<td><code>.back()</code></td>\n<td><code>int a = que.back();</code></td>\n</tr>\n<tr>\n<td>查看大小 / 清空 / 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"适用情形-3\"><a class=\"anchor\" href=\"#适用情形-3\">#</a> 适用情形</h3>\n<p>如果不卡常的话，就可以直接用它而不需要手写队列了。</p>\n<h3 id=\"注意事项-3\"><a class=\"anchor\" href=\"#注意事项-3\">#</a> 注意事项</h3>\n<p>不可访问内部元素！<strong>下面都是错误用法</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> que<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> que<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> ele <span class=\"token operator\">:</span> que<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> ele <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"优先队列-priority_queue\"><a class=\"anchor\" href=\"#优先队列-priority_queue\">#</a> 优先队列 <a href=\"https://zh.cppreference.com/w/cpp/container/priority_queue\">priority_queue</a></h2>\n<p><strong> <code>#include &lt;queue&gt;</code> </strong></p>\n<p>提供常数时间的最大元素查找，对数时间的插入与提取，底层原理是二叉堆。</p>\n<h3 id=\"常用方法-4\"><a class=\"anchor\" href=\"#常用方法-4\">#</a> 常用方法</h3>\n<h4 id=\"构造-2\"><a class=\"anchor\" href=\"#构造-2\">#</a> 构造</h4>\n<p><strong> <code>priority_queue&lt;类型, 容器, 比较器&gt; pque</code> </strong></p>\n<ul>\n<li>类型：要储存的数据类型</li>\n<li>容器：储存数据的底层容器，默认为  <code>vector&lt;类型&gt;</code> ，竞赛中保持默认即可</li>\n<li>比较器：比较大小使用的比较器，默认为  <code>less&lt;类型&gt;</code> ，可自定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> pque1<span class=\"token punctuation\">;</span>                            <span class=\"token comment\">// 储存 int 的大顶堆</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> pque2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 储存 int 的小顶堆</span></pre></td></tr></table></figure><blockquote>\n<p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 /lambda 表达式），在此就不展开讲了。如果想要了解，可以查阅 cppreference 中的代码示例。</p>\n</blockquote>\n<h4 id=\"其他\"><a class=\"anchor\" href=\"#其他\">#</a> 其他</h4>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>进堆</td>\n<td><code>.push(元素)</code></td>\n<td><code>que.push(1);</code></td>\n</tr>\n<tr>\n<td>出堆</td>\n<td><code>.pop()</code></td>\n<td><code>que.pop();</code></td>\n</tr>\n<tr>\n<td>取堆顶</td>\n<td><code>.top()</code></td>\n<td><code>int a = que.top();</code></td>\n</tr>\n<tr>\n<td>查看大小 / 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody>\n</table>\n<p>进出队复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，取堆顶 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<h3 id=\"适用情形-4\"><a class=\"anchor\" href=\"#适用情形-4\">#</a> 适用情形</h3>\n<p>持续维护元素的有序性：每次向队列插入大小不定的元素，或者每次从队列里取出大小最小 / 最大的元素，元素数量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>，插入操作数量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>.</p>\n<ul>\n<li>每次插入后进行快速排序：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>⋅</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">k\\cdot n\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n<li>使用优先队列维护：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>⋅</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">k\\cdot\\log n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></li>\n</ul>\n<h3 id=\"注意事项-4\"><a class=\"anchor\" href=\"#注意事项-4\">#</a> 注意事项</h3>\n<h4 id=\"仅堆顶可读\"><a class=\"anchor\" href=\"#仅堆顶可读\">#</a> 仅堆顶可读</h4>\n<p>只可访问堆顶，其他元素都无法读取到。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> pque<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"所有元素不可写\"><a class=\"anchor\" href=\"#所有元素不可写\">#</a> 所有元素不可写</h4>\n<p>堆中所有元素是不可修改的。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pque<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pque<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果你恰好要修改的是堆顶元素，那么是可以完成的：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> tp <span class=\"token operator\">=</span> pque<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pque<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pque<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tp <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"集合-set\"><a class=\"anchor\" href=\"#集合-set\">#</a> 集合 <a href=\"https://zh.cppreference.com/w/cpp/container/set\">set</a></h2>\n<p><strong> <code>#include &lt;set&gt;</code> </strong></p>\n<p>提供对数时间的插入、删除、查找的集合数据结构。底层原理是红黑树。</p>\n<table>\n<thead>\n<tr>\n<th>集合三要素</th>\n<th>解释</th>\n<th>set</th>\n<th>multiset</th>\n<th>unordered_set</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>确定性</td>\n<td>一个元素要么在集合中，要么不在</td>\n<td>✔</td>\n<td>✔</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>互异性</td>\n<td>一个元素仅可以在集合中出现一次</td>\n<td>✔</td>\n<td>❌（任意次）</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>无序性</td>\n<td>集合中的元素是没有顺序的</td>\n<td>❌（从小到大）</td>\n<td>❌（从小到大）</td>\n<td>✔</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常用方法-5\"><a class=\"anchor\" href=\"#常用方法-5\">#</a> 常用方法</h3>\n<h4 id=\"构造-3\"><a class=\"anchor\" href=\"#构造-3\">#</a> 构造</h4>\n<p><strong> <code>set&lt;类型, 比较器&gt; st</code> </strong></p>\n<ul>\n<li>类型：要储存的数据类型</li>\n<li>比较器：比较大小使用的比较器，默认为  <code>less&lt;类型&gt;</code> ，可自定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> st1<span class=\"token punctuation\">;</span>               <span class=\"token comment\">// 储存 int 的集合（从小到大）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> st2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 储存 int 的集合（从大到小）</span></pre></td></tr></table></figure><blockquote>\n<p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 /lambda 表达式），在此就不展开讲了。</p>\n</blockquote>\n<h4 id=\"遍历\"><a class=\"anchor\" href=\"#遍历\">#</a> 遍历</h4>\n<p>可使用迭代器进行遍历：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>基于范围的循环（C++ 11）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>ele <span class=\"token operator\">:</span> st<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> ele <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"其他-2\"><a class=\"anchor\" href=\"#其他-2\">#</a> 其他</h4>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入元素</td>\n<td><code>.insert(元素)</code></td>\n<td><code>st.insert(1);</code></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td><code>.erase(元素)</code></td>\n<td><code>st.erase(2);</code></td>\n</tr>\n<tr>\n<td>查找元素</td>\n<td><code>.find(元素)</code></td>\n<td><code>auto it = st.find(1);</code></td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td><code>.count(元素)</code></td>\n<td><code>st.count(3);</code></td>\n</tr>\n<tr>\n<td>查看大小 / 清空 / 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody>\n</table>\n<p>增删查时间复杂度均为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"适用情形-5\"><a class=\"anchor\" href=\"#适用情形-5\">#</a> 适用情形</h3>\n<ul>\n<li>元素去重：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">]</mo><mo>→</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,1,3,2,4,4]\\to[1,2,3,4]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">4</span><span class=\"mclose\">]</span></span></span></span></li>\n<li>维护顺序：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>9</mn><mo stretchy=\"false\">]</mo><mo>→</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>7</mn><mo separator=\"true\">,</mo><mn>9</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,5,3,7,9]\\to[1,3,5,7,9]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">7</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">9</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">7</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">9</span><span class=\"mclose\">]</span></span></span></span></li>\n<li>元素是否出现过：元素大小 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup><mo separator=\"true\">,</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-10^{18},10^{18}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">18</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">18</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>，元素数量 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">10^6</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span>，vis 数组无法实现，通过 set 可以完成。</li>\n</ul>\n<h3 id=\"注意事项-5\"><a class=\"anchor\" href=\"#注意事项-5\">#</a> 注意事项</h3>\n<h4 id=\"不存在下标索引\"><a class=\"anchor\" href=\"#不存在下标索引\">#</a> 不存在下标索引</h4>\n<p>set 虽说可遍历，但仅可使用迭代器进行遍历，它不存在下标这一概念，无法通过下标访问到数据。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"元素只读\"><a class=\"anchor\" href=\"#元素只读\">#</a> 元素只读</h4>\n<p>set 的迭代器取到的元素是只读的（因为是 const 迭代器），不可修改其值。如果要改，需要先 erase 再 insert. <strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确。可读。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 错误！不可写！</span></pre></td></tr></table></figure><h4 id=\"不可用迭代器计算下标\"><a class=\"anchor\" href=\"#不可用迭代器计算下标\">#</a> 不可用迭代器计算下标</h4>\n<p>set 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 正确，返回 2 所在位置的迭代器。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> it <span class=\"token operator\">-</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误！不可相减得到下标。</span></pre></td></tr></table></figure><h2 id=\"映射-map\"><a class=\"anchor\" href=\"#映射-map\">#</a> 映射 <a href=\"https://zh.cppreference.com/w/cpp/container/map\">map</a></h2>\n<p><strong> <code>#include &lt;map&gt;</code> </strong></p>\n<p>提供对数时间的有序键值对结构。底层原理是红黑树。</p>\n<p>映射：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.16em\" columnalign=\"center center center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">→</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">→</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">→</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mo lspace=\"0em\" rspace=\"0em\">→</mo></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{matrix}\n1&amp;\\to&amp;2\\\\\n2&amp;\\to&amp;2\\\\\n3&amp;\\to&amp;1\\\\\n4&amp;\\to&amp;5\\\\\n&amp;\\vdots\n\\end{matrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.66em;vertical-align:-3.08em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.58em;\"><span style=\"top:-6.24em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-5.04em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.84em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"mord\">3</span></span></span><span style=\"top:-2.64em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"><span class=\"mord\">4</span></span></span><span style=\"top:-0.78em;\"><span class=\"pstrut\" style=\"height:3.5em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.08em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.58em;\"><span style=\"top:-6.4275em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mrel\">→</span></span></span><span style=\"top:-5.2275em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mrel\">→</span></span></span><span style=\"top:-4.0275em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mrel\">→</span></span></span><span style=\"top:-2.8275em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mrel\">→</span></span></span><span style=\"top:-0.9675em;\"><span class=\"pstrut\" style=\"height:3.6875em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.08em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.58em;\"><span style=\"top:-5.74em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-4.54em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.34em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span><span style=\"top:-2.14em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.22em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<table>\n<thead>\n<tr>\n<th>性质</th>\n<th>解释</th>\n<th>map</th>\n<th>multimap</th>\n<th>unordered_map</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>互异性</td>\n<td>一个键仅可以在映射中出现一次</td>\n<td>✔</td>\n<td>❌（任意次）</td>\n<td>✔</td>\n</tr>\n<tr>\n<td>无序性</td>\n<td>键是没有顺序的</td>\n<td>❌（从小到大）</td>\n<td>❌（从小到大）</td>\n<td>✔</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常用方法-6\"><a class=\"anchor\" href=\"#常用方法-6\">#</a> 常用方法</h3>\n<h4 id=\"构造-4\"><a class=\"anchor\" href=\"#构造-4\">#</a> 构造</h4>\n<p><strong> <code>map&lt;键类型, 值类型, 比较器&gt; mp</code> </strong></p>\n<ul>\n<li>键类型：要储存键的数据类型</li>\n<li>值类型：要储存值的数据类型</li>\n<li>比较器：键比较大小使用的比较器，默认为  <code>less&lt;类型&gt;</code> ，可自定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp1<span class=\"token punctuation\">;</span>               <span class=\"token comment\">//int->int 的映射（键从小到大）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> st2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//int->int 的映射（键从大到小）</span></pre></td></tr></table></figure><blockquote>\n<p>对于需要自定义比较器的情况，涉及一些初学时容易看迷糊的语法（重载小括号运算符 /lambda 表达式），在此就不展开讲了。</p>\n</blockquote>\n<h4 id=\"遍历-2\"><a class=\"anchor\" href=\"#遍历-2\">#</a> 遍历</h4>\n<p>可使用迭代器进行遍历：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>基于范围的循环（C++ 11）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>pr <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> pr<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> pr<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结构化绑定 + 基于范围的循环（C++17）：</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> key <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">' '</span> <span class=\"token operator\">&lt;&lt;</span> val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"其他-3\"><a class=\"anchor\" href=\"#其他-3\">#</a> 其他</h4>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>增 / 改 / 查元素</td>\n<td>中括号</td>\n<td><code>mp[1] = 2;</code></td>\n</tr>\n<tr>\n<td>查元素（返回迭代器）</td>\n<td><code>.find(元素)</code></td>\n<td><code>auto it = mp.find(1);</code></td>\n</tr>\n<tr>\n<td>删除元素</td>\n<td><code>.erase(元素)</code></td>\n<td><code>mp.erase(2);</code></td>\n</tr>\n<tr>\n<td>判断元素是否存在</td>\n<td><code>.count(元素)</code></td>\n<td><code>mp.count(3);</code></td>\n</tr>\n<tr>\n<td>查看大小 / 清空 / 判空</td>\n<td>略</td>\n<td>略</td>\n</tr>\n</tbody>\n</table>\n<p>增删改查时间复杂度均为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h3 id=\"适用情形-6\"><a class=\"anchor\" href=\"#适用情形-6\">#</a> 适用情形</h3>\n<p>需要维护映射的场景可以使用：输入若干字符串，统计每种字符串的出现次数。( <code>map&lt;string, int&gt; mp</code> )</p>\n<h3 id=\"注意事项-6\"><a class=\"anchor\" href=\"#注意事项-6\">#</a> 注意事项</h3>\n<h4 id=\"中括号访问时默认值\"><a class=\"anchor\" href=\"#中括号访问时默认值\">#</a> 中括号访问时默认值</h4>\n<p>如果使用中括号访问 map 时对应的键不存在，那么会新增这个键，并且值为默认值，因此中括号会影响键的存在性。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mp<span class=\"token punctuation\">[</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>                       <span class=\"token comment\">// 即使什么都没做，此时 mp ['a']=0 已经插入了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> mp<span class=\"token punctuation\">[</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 0</span></pre></td></tr></table></figure><h4 id=\"不可用迭代器计算下标-2\"><a class=\"anchor\" href=\"#不可用迭代器计算下标-2\">#</a> 不可用迭代器计算下标</h4>\n<p>map 的迭代器不能像 vector 一样相减得到下标。<strong>下面是错误用法：</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 正确，返回 2 所在位置的迭代器。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> it <span class=\"token operator\">-</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 错误！不可相减得到下标。</span></pre></td></tr></table></figure><h2 id=\"字符串-string\"><a class=\"anchor\" href=\"#字符串-string\">#</a> 字符串 <a href=\"https://zh.cppreference.com/w/cpp/string\">string</a></h2>\n<p><strong> <code>#include &lt;string&gt;</code> </strong></p>\n<p>顾名思义，就是储存字符串的。</p>\n<h3 id=\"常用方法-7\"><a class=\"anchor\" href=\"#常用方法-7\">#</a> 常用方法</h3>\n<h4 id=\"构造-5\"><a class=\"anchor\" href=\"#构造-5\">#</a> 构造</h4>\n<p>构造函数： <code>string(长度, 初值)</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s1<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 构造字符串，为空</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"awa!\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构造字符串，并赋值 awa!</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>string <span class=\"token function\">s3</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 构造字符串，通过构造函数构造为 6666666666</span></pre></td></tr></table></figure><h4 id=\"输入输出\"><a class=\"anchor\" href=\"#输入输出\">#</a> 输入输出</h4>\n<p>C++</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cout <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>C</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"其他-4\"><a class=\"anchor\" href=\"#其他-4\">#</a> 其他</h4>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>用法</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>修改、查询指定下标字符</td>\n<td><code>[]</code></td>\n<td><code>s[1] = 'a';</code></td>\n</tr>\n<tr>\n<td>是否相同</td>\n<td><code>==</code></td>\n<td><code>if (s1 == s2) ...</code></td>\n</tr>\n<tr>\n<td>字符串连接</td>\n<td><code>+</code></td>\n<td><code>string s = s1 + s2;</code></td>\n</tr>\n<tr>\n<td>尾接字符串</td>\n<td><code>+=</code></td>\n<td><code>s += &quot;awa&quot;;</code></td>\n</tr>\n<tr>\n<td>取子串</td>\n<td><code>.substr(起始下标, 子串长度)</code></td>\n<td><code>string sub = s.substr(2, 10);</code></td>\n</tr>\n<tr>\n<td>查找字符串</td>\n<td><code>.find(字符串, 起始下标)</code></td>\n<td><code>int pos = s.find(&quot;awa&quot;);</code></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"数值与字符串互转c11\"><a class=\"anchor\" href=\"#数值与字符串互转c11\">#</a> 数值与字符串互转（C++11）</h4>\n<table>\n<thead>\n<tr>\n<th>源</th>\n<th>目的</th>\n<th>函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int / long long / float / double / long double</td>\n<td>string</td>\n<td>to_string()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>int</td>\n<td>stoi()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>long long</td>\n<td>stoll()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>float</td>\n<td>stof()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>double</td>\n<td>stod()</td>\n</tr>\n<tr>\n<td>string</td>\n<td>long double</td>\n<td>stold()</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"适用情形-7\"><a class=\"anchor\" href=\"#适用情形-7\">#</a> 适用情形</h3>\n<p>非常好用！<s>建议直接把字符数组扔了，赶快投入 string 的怀抱。</s></p>\n<h3 id=\"注意事项-7\"><a class=\"anchor\" href=\"#注意事项-7\">#</a> 注意事项</h3>\n<h4 id=\"尾接字符串一定要用\"><a class=\"anchor\" href=\"#尾接字符串一定要用\">#</a> 尾接字符串一定要用  <code>+=</code></h4>\n<p>string 的 += 运算符，将会在原字符串原地尾接字符串。而 + 了再 = 赋值，会先生成一个临时变量，在复制给 string.</p>\n<p>通常字符串长度可以很长，如果使用 + 字符串很容易就 TLE 了。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 优化前: 15139ms</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5e5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    s <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 优化后: &lt; 1ms (计时器显示 0)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>string s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5e5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    s <span class=\"token operator\">+=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"substr-方法的奇葩参数\"><a class=\"anchor\" href=\"#substr-方法的奇葩参数\">#</a>  <code>.substr()</code>  方法的奇葩参数</h4>\n<p>一定要注意，C++ string 的取子串的第一个参数是<strong>子串起点下标</strong>，第二个参数是<strong>子串长度</strong>。</p>\n<p>第二个参数不是子串终点！不是子串终点！要与 java 等其他语言区分开来。</p>\n<h4 id=\"find-方法的复杂度\"><a class=\"anchor\" href=\"#find-方法的复杂度\">#</a>  <code>.find()</code>  方法的复杂度</h4>\n<p>该方法实现为暴力实现，时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p><s>不要幻想 STL 内置了个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的 KMP 算法</s></p>\n<h2 id=\"二元组-pair\"><a class=\"anchor\" href=\"#二元组-pair\">#</a> 二元组 <a href=\"https://zh.cppreference.com/w/cpp/utility/pair\">pair</a></h2>\n<p><strong> <code>#include &lt;utility&gt;</code> </strong></p>\n<p>顾名思义，就是储存二元组的。</p>\n<h3 id=\"常用方法-8\"><a class=\"anchor\" href=\"#常用方法-8\">#</a> 常用方法</h3>\n<h4 id=\"构造-6\"><a class=\"anchor\" href=\"#构造-6\">#</a> 构造</h4>\n<p><strong> <code>pair&lt;第一个值类型, 第二个值类型&gt; pr</code> </strong></p>\n<ul>\n<li>第一个值类型：要储存的第一个值的数据类型</li>\n<li>第二个值类型：要储存的第二个值的数据类型</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> p3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr></table></figure><h4 id=\"赋值\"><a class=\"anchor\" href=\"#赋值\">#</a> 赋值</h4>\n<p>老式</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> pr <span class=\"token operator\">=</span> <span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>列表构造 C++11</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> pr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"取值\"><a class=\"anchor\" href=\"#取值\">#</a> 取值</h4>\n<p>直接取值</p>\n<ul>\n<li>取第一个值： <code>.first</code></li>\n<li>取第二个值： <code>.second</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> pr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> awa <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> bwb <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结构化绑定 C++17</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> pr <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">[</span>awa<span class=\"token punctuation\">,</span> bwb<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"判同\"><a class=\"anchor\" href=\"#判同\">#</a> 判同</h4>\n<p>直接用  <code>==</code>  运算符</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> p1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> p2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h3 id=\"适用场景\"><a class=\"anchor\" href=\"#适用场景\">#</a> 适用场景</h3>\n<p>所有需要二元组的场景均可使用，效率和自己定义结构体差不多。</p>\n<h3 id=\"注意事项-8\"><a class=\"anchor\" href=\"#注意事项-8\">#</a> 注意事项</h3>\n<p>无</p>\n",
            "tags": [
                "STL",
                "STL",
                "C++",
                "算法"
            ]
        },
        {
            "id": "https://superjeason.github.io/2024/06/20/markdown/",
            "url": "https://superjeason.github.io/2024/06/20/markdown/",
            "title": "markdown",
            "date_published": "2024-06-20T12:42:12.000Z",
            "content_html": "<h2 id=\"什么是-markdown\"><a class=\"anchor\" href=\"#什么是-markdown\">#</a> 什么是 Markdown ?</h2>\n<blockquote>\n<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>\n</blockquote>\n<h2 id=\"分级标题\"><a class=\"anchor\" href=\"#分级标题\">#</a> 分级标题</h2>\n<p>第一种写法:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\">这是一个一级标题</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">============================</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token title important\">这是一个二级标题</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">--------------------------------------------------</span></span></pre></td></tr></table></figure><blockquote>\n<h1 id=\"这是一个一级标题\"><a class=\"anchor\" href=\"#这是一个一级标题\">#</a> 这是一个一级标题</h1>\n<h2 id=\"这是一个二级标题\"><a class=\"anchor\" href=\"#这是一个二级标题\">#</a> 这是一个二级标题</h2>\n</blockquote>\n<hr />\n<p>第二种写法:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法 </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#</span> 一级标题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">##</span> 二级标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">###</span> 三级标题</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">####</span> 四级标题</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">#####</span> 五级标题</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">######</span> 六级标题</span></pre></td></tr></table></figure><blockquote>\n<h1 id=\"一级标题\"><a class=\"anchor\" href=\"#一级标题\">#</a> 一级标题</h1>\n<h2 id=\"二级标题\"><a class=\"anchor\" href=\"#二级标题\">#</a> 二级标题</h2>\n<h3 id=\"三级标题\"><a class=\"anchor\" href=\"#三级标题\">#</a> 三级标题</h3>\n<h4 id=\"四级标题\"><a class=\"anchor\" href=\"#四级标题\">#</a> 四级标题</h4>\n<h5 id=\"五级标题\"><a class=\"anchor\" href=\"#五级标题\">#</a> 五级标题</h5>\n<h6 id=\"六级标题\"><a class=\"anchor\" href=\"#六级标题\">#</a> 六级标题</h6>\n</blockquote>\n<h2 id=\"分隔线\"><a class=\"anchor\" href=\"#分隔线\">#</a> 分隔线</h2>\n<p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token hr punctuation\">* * *</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token hr punctuation\">***</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token hr punctuation\">*****</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token hr punctuation\">- - -</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token hr punctuation\">---------------------------------------</span></pre></td></tr></table></figure><blockquote>\n<hr />\n<hr />\n</blockquote>\n<h2 id=\"超链接\"><a class=\"anchor\" href=\"#超链接\">#</a> 超链接</h2>\n<p>Markdown 支持两种形式的链接语法：行内式和参考式两种形式，行内式一般使用较多。</p>\n<h3 id=\"行内式\"><a class=\"anchor\" href=\"#行内式\">#</a> 行内式</h3>\n<p><code>[]</code>  里写链接文字， <code>()</code>  里写链接地址， <code>()</code>  中的  <code>&quot;&quot;</code>  中可以为链接指定 title 属性，title 属性可加可不加。title 属性的效果是鼠标悬停在链接上会出现指定的 title 文字。 <code>[链接文字](链接地址 &quot;链接标题&quot;)</code>  这样的形式。链接地址与链接标题前有一个空格。</p>\n<h3 id=\"参考式\"><a class=\"anchor\" href=\"#参考式\">#</a> 参考式</h3>\n<p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p>\n<p>参考式链接分为两部分，文中的写法  <code>[链接文字][链接标记]</code> ，在文本的任意位置添加  <code>[链接标记]:链接地址 &quot;链接标题&quot;</code> , 链接地址与链接标题前有一个空格。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>全球最大的搜索引擎网站是<span class=\"token url\">[<span class=\"token content\">Google</span>][<span class=\"token variable\">1</span>]</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>[1]:http://www.google.com \"Google\"</pre></td></tr></table></figure><blockquote>\n<p>全球最大的搜索引擎网站是 <a href=\"http://www.google.com\" title=\"Google\">Google</a>。<br />\n&lt;br /&gt;</p>\n</blockquote>\n<h3 id=\"自动链接\"><a class=\"anchor\" href=\"#自动链接\">#</a> 自动链接</h3>\n<p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用  <code>&lt;&gt;</code>  包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;https://google.com/></pre></td></tr></table></figure><h2 id=\"区块引用\"><a class=\"anchor\" href=\"#区块引用\">#</a> 区块引用</h2>\n<p>区块引用需要在被引用的文本前加上  <code>&gt;</code>  符号。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token blockquote punctuation\">></span> 这是一个区块引用实例,</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token blockquote punctuation\">></span> Markdown.</pre></td></tr></table></figure><blockquote>\n<p>这是一个区块引用实例，</p>\n</blockquote>\n<blockquote>\n<p>Markdown.</p>\n</blockquote>\n<p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上  <code>&gt;</code>  :</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token blockquote punctuation\">></span> 平生不会相思,</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>才会相思,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>便害相思。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token blockquote punctuation\">></span> 空一缕余香在此,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>盼千金游子何之。</pre></td></tr></table></figure><blockquote>\n<p>平生不会相思，<br />\n 才会相思，<br />\n 便害相思。</p>\n</blockquote>\n<blockquote>\n<p>空一缕余香在此，<br />\n 盼千金游子何之。</p>\n</blockquote>\n<h3 id=\"引用的多层嵌套\"><a class=\"anchor\" href=\"#引用的多层嵌套\">#</a> 引用的多层嵌套</h3>\n<p>区块引用可以嵌套（例如：引用内的引用）, 只要根据层次加上不同数量的  <code>&gt;</code>  :</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token blockquote punctuation\">>>></span> 锄禾日当午, 汗滴禾下土。 - 李绅</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token blockquote punctuation\">>></span> 山有木兮木有枝, 心悦君兮君不知。 - 越人歌</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token blockquote punctuation\">></span> 去年今日此门中, 人面桃花相映红。 - 崔护</pre></td></tr></table></figure><blockquote>\n<blockquote>\n<blockquote>\n<p>锄禾日当午，汗滴禾下土。 - 李绅</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<blockquote>\n<blockquote>\n<p>山有木兮木有枝，心悦君兮君不知。 - 越人歌</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>去年今日此门中，人面桃花相映红。 - 题都城南庄</p>\n</blockquote>\n<h3 id=\"引用其它要素\"><a class=\"anchor\" href=\"#引用其它要素\">#</a> 引用其它要素</h3>\n<p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token blockquote punctuation\">></span> <span class=\"token list punctuation\">-</span> 入我相思门, 知我相思苦。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token blockquote punctuation\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token blockquote punctuation\">></span> <span class=\"token list punctuation\">-</span> 长相思兮长相忆, 短相思兮无穷极。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token blockquote punctuation\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token blockquote punctuation\">></span> <span class=\"token list punctuation\">-</span> 给出一些例子代码:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token blockquote punctuation\">></span> ```markdown markdown写法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token blockquote punctuation\">></span>   return debug_backtrace();</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token blockquote punctuation\">></span> ```</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>``` markdown markdown</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token blockquote punctuation\">></span> <span class=\"token list punctuation\">-</span> 入我相思门, 知我相思苦。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token blockquote punctuation\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token blockquote punctuation\">></span> <span class=\"token list punctuation\">-</span> 长相思兮长相忆, 短相思兮无穷极。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token blockquote punctuation\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token blockquote punctuation\">></span> <span class=\"token list punctuation\">-</span> 给出一些例子代码:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token blockquote punctuation\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token blockquote punctuation\">></span> ```markdown markdown写法</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token blockquote punctuation\">></span>   return debug_backtrace();</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token blockquote punctuation\">></span> ```</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token title important\"><span class=\"token punctuation\">##</span> 锚点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>网页中, 锚点其实就是页内超链接, 也就是链接本文档内部的某些元素, 实现当前页面中的跳转。比如我这里写下一个锚点, 点击回到目录, 就能跳转到目录。 在目录中点击这一节, 就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>```markdown markdown写法</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\"><span class=\"token url\">[<span class=\"token content\">⬆ top</span>](<span class=\"token url\">#什么是-markdown-</span>)</span></span><span class=\"token punctuation\">**</span></span></pre></td></tr></table></figure><p><strong><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-markdown-\">⬆ top</a></strong></p>\n<h2 id=\"强调\"><a class=\"anchor\" href=\"#强调\">#</a> 强调</h2>\n<p>Markdown 使用星号 <code>*</code>  和底线 <code>_</code> 作为标记强调字词的符号。</p>\n<h3 id=\"斜体\"><a class=\"anchor\" href=\"#斜体\">#</a> 斜体</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">花自飘零水自流</span><span class=\"token punctuation\">*</span></span></pre></td></tr></table></figure><blockquote>\n<p><em>花自飘零水自流</em></p>\n</blockquote>\n<h3 id=\"粗体\"><a class=\"anchor\" href=\"#粗体\">#</a> 粗体</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">花自飘零水自流</span><span class=\"token punctuation\">**</span></span></pre></td></tr></table></figure><blockquote>\n<p><strong>花自飘零水自流</strong></p>\n</blockquote>\n<h3 id=\"删除线\"><a class=\"anchor\" href=\"#删除线\">#</a> 删除线</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token strike\"><span class=\"token punctuation\">~~</span><span class=\"token content\">花自飘零水自流</span><span class=\"token punctuation\">~~</span></span></pre></td></tr></table></figure><blockquote>\n<p><s>花自飘零水自流</s></p>\n</blockquote>\n<h2 id=\"列表\"><a class=\"anchor\" href=\"#列表\">#</a> 列表</h2>\n<p>使用 *，+，- 表示无序列表。</p>\n<h3 id=\"无序列表\"><a class=\"anchor\" href=\"#无序列表\">#</a> 无序列表</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">-</span> 白头吟</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">-</span> 击鼓</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">-</span> 断句</pre></td></tr></table></figure><blockquote>\n<ul>\n<li>\n<p>白头吟</p>\n</li>\n<li>\n<p>击鼓</p>\n</li>\n<li>\n<p>断句</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"有序列表\"><a class=\"anchor\" href=\"#有序列表\">#</a> 有序列表</h3>\n<p>有序列表则使用数字接着一个英文句点。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">1.</span> 白头吟</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">2.</span> 击鼓</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token list punctuation\">3.</span> 断句</pre></td></tr></table></figure><blockquote>\n<ol>\n<li>\n<p>白头吟</p>\n</li>\n<li>\n<p>击鼓</p>\n</li>\n<li>\n<p>断句</p>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"包含引用的列表\"><a class=\"anchor\" href=\"#包含引用的列表\">#</a> 包含引用的列表</h3>\n<p>如果要在列表项目内放进引用，那  <code>&gt;</code>  就需要缩进:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">*</span> 菩提偈:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  > 菩提本无树，明镜亦非台。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  > 本来无一物，何处惹尘埃！</pre></td></tr></table></figure><ul>\n<li>\n<p>菩提偈:</p>\n<blockquote>\n<p>菩提本无树，明镜亦非台。<br />\n本来无一物，何处惹尘埃！</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"插入图片\"><a class=\"anchor\" href=\"#插入图片\">#</a> 插入图片</h2>\n<p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p>\n<p>语法中图片 Alt 的意思是如果图片因为某些原因不能显示，就用定义的图片 Alt 文字来代替图片。 图片 Title 则和链接中的 Title 一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。</p>\n<h3 id=\"图片行内式\"><a class=\"anchor\" href=\"#图片行内式\">#</a> 图片行内式</h3>\n<p><code>![图片Alt](图片地址 &quot;图片Title&quot;)</code></p>\n<pre><code class=\"language-markdown\">\n</code></pre>\n<h3 id=\"图片参考式\"><a class=\"anchor\" href=\"#图片参考式\">#</a> 图片参考式</h3>\n<p>在文档要插入图片的地方写  <code>![图片Alt][标记]</code> 。</p>\n<p>在文档的最后写上  <code>[标记]:图片地址 &quot;Title&quot;</code> 。</p>\n<h2 id=\"表格\"><a class=\"anchor\" href=\"#表格\">#</a> 表格</h2>\n<ol>\n<li>不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。</li>\n<li>列于列之间用管道符 <code>|</code>  隔开。原生方式的表格每一行的两边也要有管道符。</li>\n<li>第二行还可以为不同的列指定对齐方向。默认为左对齐，在 <code>-</code>  右边加上 <code>:</code>  就右对齐。</li>\n</ol>\n<p>简单方式:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>诗名|作者|朝代</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-|-|-</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>白头吟|卓文君|两汉</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>锦瑟|李商隐|唐代</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>登科后|孟郊|唐代</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>诗名</th>\n<th>作者</th>\n<th>朝代</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>白头吟</td>\n<td>卓文君</td>\n<td>两汉</td>\n</tr>\n<tr>\n<td>锦瑟</td>\n<td>李商隐</td>\n<td>唐代</td>\n</tr>\n<tr>\n<td>登科后</td>\n<td>孟郊</td>\n<td>唐代</td>\n</tr>\n</tbody>\n</table>\n<p>原生方式:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>|诗名|作者|朝代|</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>|-|-|-|</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>|白头吟|卓文君|两汉|</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>|锦瑟|李商隐|唐代|</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>|登科后|孟郊|唐代|</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>诗名</th>\n<th>作者</th>\n<th>朝代</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>白头吟</td>\n<td>卓文君</td>\n<td>两汉</td>\n</tr>\n<tr>\n<td>锦瑟</td>\n<td>李商隐</td>\n<td>唐代</td>\n</tr>\n<tr>\n<td>登科后</td>\n<td>孟郊</td>\n<td>唐代</td>\n</tr>\n</tbody>\n</table>\n<p>为表格第二列指定方向:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>诗名|名句</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>-|-:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>梦微之|君埋泉下泥销骨。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>上邪|上邪，我欲与君相知，长命无绝衰。</pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>诗名</th>\n<th style=\"text-align:right\">名句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>梦微之</td>\n<td style=\"text-align:right\">君埋泉下泥销骨。</td>\n</tr>\n<tr>\n<td>上邪</td>\n<td style=\"text-align:right\">上邪，我欲与君相知，长命无绝衰。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h2>\n<p>对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进 (Tab), 另一种是利用 &quot;`&quot; 符号 (一般在 ESC 键下方) 包裹代码。</p>\n<ul>\n<li>插入行内代码，即插入一个单词或者一句代码的情况，使用 `code` 这样的形式插入。</li>\n<li>插入多行代码，可以使用缩进或者 ```code```, 具体看示例。</li>\n</ul>\n<h3 id=\"代码行内式\"><a class=\"anchor\" href=\"#代码行内式\">#</a> 代码行内式</h3>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PHP打印堆栈信息 <span class=\"token code-snippet code keyword\">`debug_backtrace()`</span>。</pre></td></tr></table></figure><blockquote>\n<p>PHP 打印堆栈信息  <code>debug_backtrace()</code> 。</p>\n</blockquote>\n<h3 id=\"缩进式多行代码\"><a class=\"anchor\" href=\"#缩进式多行代码\">#</a> 缩进式多行代码</h3>\n<p>缩进 4 个空格或是 1 个制表符。</p>\n<p>一个代码区块会一直持续到没有缩进的那一行 (或是文件结尾)。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$closure = function () use($name) &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      return $name;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &#125;</pre></td></tr></table></figure><pre><code>$closure = function () use($name) &#123;\n  return $name;\n&#125;\n</code></pre>\n<h3 id=\"用六个-包裹多行代码\"><a class=\"anchor\" href=\"#用六个-包裹多行代码\">#</a> 用六个 ` 包裹多行代码</h3>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string backtick-quoted-string\">``</span><span class=\"token string backtick-quoted-string\">`php</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$closure = function () use($name) &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  return $name;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>`</span> <span class=\"token string backtick-quoted-string\">``</span></pre></td></tr></table></figure><figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$closure</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">use</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"html-原始码\"><a class=\"anchor\" href=\"#html-原始码\">#</a> HTML 原始码</h3>\n<p>在代码区块里面， <code>&amp;</code>  、  <code>&lt;</code>  和  <code>&gt;</code>  会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如:</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">rowspan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>值班人员<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>星期一<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>星期二<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>星期三<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>李强<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>张明<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>王平<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>&lt;table&gt;<br />\n&lt;tr&gt;<br />\n&lt;th rowspan=&quot;2&quot;&gt; 值班人员 &lt;/th&gt;<br />\n&lt;th&gt; 星期一 &lt;/th&gt;<br />\n&lt;th&gt; 星期二 &lt;/th&gt;<br />\n&lt;th&gt; 星期三 &lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt; 李强 &lt;/td&gt;<br />\n&lt;td&gt; 张明 &lt;/td&gt;<br />\n&lt;td&gt; 王平 &lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/table&gt;</p>\n<h3 id=\"内容目录\"><a class=\"anchor\" href=\"#内容目录\">#</a> 内容目录</h3>\n<p>在段落中填写  <code>[TOC]</code>  以显示全文内容的目录结构。</p>\n<h2 id=\"注脚\"><a class=\"anchor\" href=\"#注脚\">#</a> 注脚</h2>\n<p>在需要添加注脚的文字后加上脚注名字 <code>[^注脚名字]</code> , 称为加注。 然后在文本的任意位置 (一般在最后) 添加脚注，脚注前必须有对应的脚注名字。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2]。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">^1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Markdown</span> 是一种纯文本标记语言</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token url-reference url\"><span class=\"token punctuation\">[</span><span class=\"token variable\">^2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> HyperText</span> Markup Language 超文本标记语言</pre></td></tr></table></figure><p>PS: github 不支持注脚 😂</p>\n<h2 id=\"latex-公式\"><a class=\"anchor\" href=\"#latex-公式\">#</a> LaTeX 公式</h2>\n<h3 id=\"表示行内公式\"><a class=\"anchor\" href=\"#表示行内公式\">#</a> $ 表示行内公式</h3>\n<p>质能守恒方程可以用一个很简洁的方程式 \\E=mc^2 来表达。</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>独立块显示：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$$\\begin &#123;array&#125;&#123;c&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;B&#125;&#125; -\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;E&#125;&#125;&#125;&#123;\\partial t&#125; &amp;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>= \\frac &#123;4\\pi&#125;&#123;c&#125;\\vec &#123;\\mathbf &#123;j&#125;&#125;    \\nabla \\cdot \\vec &#123;\\mathbf &#123;E&#125;&#125; &amp; = 4 \\pi \\rho \\\\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\\nabla \\times \\vec &#123;\\mathbf &#123;E&#125;&#125;\\, +\\, \\frac1c\\, \\frac &#123;\\partial\\vec &#123;\\mathbf &#123;B&#125;&#125;&#125;&#123;\\partial t&#125; &amp; = \\vec &#123;\\mathbf &#123;0&#125;&#125; \\\\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\\nabla \\cdot \\vec &#123;\\mathbf &#123;B&#125;&#125; &amp; = 0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\\end &#123;array&#125;$$</pre></td></tr></table></figure><p>独立块显示：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.16em\" columnalign=\"center\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover><mo>−</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mfrac><mrow><mn>4</mn><mi>π</mi></mrow><mi>c</mi></mfrac><mover accent=\"true\"><mi mathvariant=\"bold\">j</mi><mo>⃗</mo></mover><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>4</mn><mi>π</mi><mi>ρ</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>×</mo><mover accent=\"true\"><mi mathvariant=\"bold\">E</mi><mo>⃗</mo></mover><mtext> </mtext><mo>+</mo><mtext> </mtext><mfrac><mn>1</mn><mi>c</mi></mfrac><mtext> </mtext><mfrac><mrow><mi mathvariant=\"normal\">∂</mi><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant=\"normal\">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mover accent=\"true\"><mn mathvariant=\"bold\">0</mn><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi mathvariant=\"normal\">∇</mi><mo>⋅</mo><mover accent=\"true\"><mi mathvariant=\"bold\">B</mi><mo>⃗</mo></mover></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin {array}{c}\n\\nabla \\times \\vec {\\mathbf {B}} -\\, \\frac1c\\, \\frac {\\partial\\vec {\\mathbf {E}}}{\\partial t} &amp;\n= \\frac {4\\pi}{c}\\vec {\\mathbf {j}}    \\nabla \\cdot \\vec {\\mathbf {E}} &amp; = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec {\\mathbf {E}}\\, +\\, \\frac1c\\, \\frac {\\partial\\vec {\\mathbf {B}}}{\\partial t} &amp; = \\vec {\\mathbf {0}} \\\\\n\\nabla \\cdot \\vec {\\mathbf {B}} &amp; = 0\n\\end {array}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:4.1939em;vertical-align:-1.8469em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469em;\"><span style=\"top:-4.3469em;\"><span class=\"pstrut\" style=\"height:3.0724em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbf\">B</span></span><span style=\"top:-3.2551em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1522em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.471em\" height=\"0.714em\" style=\"width:0.471em\" viewBox=\"0 0 471 714\" preserveAspectRatio=\"xMinYMin\"><path d=\"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z\"/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0724em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mathbf mtight\">E</span></span><span style=\"top:-2.9691em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.1522em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.471em\" height=\"0.714em\" style=\"width:0.471em\" viewBox=\"0 0 471 714\" preserveAspectRatio=\"xMinYMin\"><path d=\"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z\"/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-2.9146em;\"><span class=\"pstrut\" style=\"height:3.0724em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbf\">E</span></span><span style=\"top:-3.2551em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1522em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.471em\" height=\"0.714em\" style=\"width:0.471em\" viewBox=\"0 0 471 714\" preserveAspectRatio=\"xMinYMin\"><path d=\"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z\"/></svg></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.0724em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord mathnormal mtight\">t</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\" style=\"margin-right:0.05556em;\">∂</span><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691em;\"><span style=\"top:-2.714em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"mord mathbf mtight\">B</span></span><span style=\"top:-2.9691em;\"><span class=\"pstrut\" style=\"height:2.714em;\"></span><span class=\"accent-body\" style=\"left:-0.1522em;\"><span class=\"overlay mtight\" style=\"height:0.714em;width:0.471em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.471em\" height=\"0.714em\" style=\"width:0.471em\" viewBox=\"0 0 471 714\" preserveAspectRatio=\"xMinYMin\"><path d=\"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z\"/></svg></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-1.5854em;\"><span class=\"pstrut\" style=\"height:3.0724em;\"></span><span class=\"mord\"><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbf\">B</span></span><span style=\"top:-3.2551em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1522em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.471em\" height=\"0.714em\" style=\"width:0.471em\" viewBox=\"0 0 471 714\" preserveAspectRatio=\"xMinYMin\"><path d=\"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z\"/></svg></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8469em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469em;\"><span style=\"top:-4.3469em;\"><span class=\"pstrut\" style=\"height:3.0724em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9774em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbf\">j</span></span><span style=\"top:-3.2634em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.471em\" height=\"0.714em\" style=\"width:0.471em\" viewBox=\"0 0 471 714\" preserveAspectRatio=\"xMinYMin\"><path d=\"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z\"/></svg></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1944em;\"><span></span></span></span></span></span><span class=\"mord\">∇</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9691em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbf\">E</span></span><span style=\"top:-3.2551em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1522em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.471em\" height=\"0.714em\" style=\"width:0.471em\" viewBox=\"0 0 471 714\" preserveAspectRatio=\"xMinYMin\"><path d=\"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z\"/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-2.9146em;\"><span class=\"pstrut\" style=\"height:3.0724em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9274em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbf\">0</span></span><span style=\"top:-3.2134em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.2355em;\"><span class=\"overlay\" style=\"height:0.714em;width:0.471em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"0.471em\" height=\"0.714em\" style=\"width:0.471em\" viewBox=\"0 0 471 714\" preserveAspectRatio=\"xMinYMin\"><path d=\"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z\"/></svg></span></span></span></span></span></span></span></span></span><span style=\"top:-1.5854em;\"><span class=\"pstrut\" style=\"height:3.0724em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8469em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.3469em;\"><span style=\"top:-4.3469em;\"><span class=\"pstrut\" style=\"height:3.0724em;\"></span><span class=\"mord\"><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord mathnormal\">ρ</span></span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span></span></span></span></span></span></span></p>\n<p>PS: github 不支持 LaTeX 公式，但是有个折中的解决方案，使用 codecogs, 例如:</p>\n<h2 id=\"流程图\"><a class=\"anchor\" href=\"#流程图\">#</a> 流程图</h2>\n<p>流程图大致分为两段，第一段是定义元素，第二段是定义元素之间的走向。</p>\n<p>定义元素的语法  <code>tag=&gt;type: content:&gt;url</code> 。</p>\n<ul>\n<li>tag 就是元素名字。</li>\n<li>type 是这个元素的类型，有 6 中类型，分别为:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>type</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start</td>\n<td>开始</td>\n</tr>\n<tr>\n<td>end</td>\n<td>结束</td>\n</tr>\n<tr>\n<td>operation</td>\n<td>操作</td>\n</tr>\n<tr>\n<td>subroutine</td>\n<td>子程序</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>条件</td>\n</tr>\n<tr>\n<td>inputoutput</td>\n<td>输入或产出</td>\n</tr>\n</tbody>\n</table>\n<p>content 就是在框框中要写的内容，注意 type 后的冒号与文本之间一定要有个空格。</p>\n<p>用 <code>-&gt;</code>  来连接两个元素，需要注意的是 condition 类型，因为他有 yes 和 no 两个分支，所以要写成:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>graph LR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    A[Square Rect] -- Link text --> B((Circle))</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    A --> C(Round Rect)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    B --> D&#123;Rhombus&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    C --> D</pre></td></tr></table></figure><figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> LR</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    A<span class=\"token text string\">[Square Rect]</span> <span class=\"token inter-arrow-label\"><span class=\"token arrow-head arrow operator\">--</span> <span class=\"token label property\">Link text</span> <span class=\"token arrow operator\">--></span></span> B<span class=\"token text string\">((Circle))</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    A <span class=\"token arrow operator\">--></span> C<span class=\"token text string\">(Round Rect)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    B <span class=\"token arrow operator\">--></span> D<span class=\"token text string\">&#123;Rhombus&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    C <span class=\"token arrow operator\">--></span> D</pre></td></tr></table></figure><h2 id=\"时序图\"><a class=\"anchor\" href=\"#时序图\">#</a> 时序图</h2>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>```sequence</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Alice->Bob: Hello Bob, how are you ?</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Note right of Bob: Bob thinks</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Bob-->Alice: I am good thanks!</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>` ``</pre></td></tr></table></figure><h2 id=\"待办事宜列表\"><a class=\"anchor\" href=\"#待办事宜列表\">#</a> 待办事宜列表</h2>\n<p>使用带有  <code>[ ]</code>  或  <code>[x]</code>  (未完成或已完成) 项的列表语法撰写一个待办事宜列表，例如:</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"><span>markdown写法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token list punctuation\">*</span> [ ] 早起跑步</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token list punctuation\">*</span> [x] 看书</pre></td></tr></table></figure><ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> 早起跑步</label></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 看书</label></li>\n</ul>\n<p><strong><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-markdown-\">⬆ top</a></strong></p>\n",
            "tags": [
                "语法",
                "markdown"
            ]
        },
        {
            "id": "https://superjeason.github.io/2024/06/20/cmake/",
            "url": "https://superjeason.github.io/2024/06/20/cmake/",
            "title": "cmake",
            "date_published": "2024-06-20T06:24:21.000Z",
            "content_html": "<h1 id=\"cmake基础模板\"><a class=\"anchor\" href=\"#cmake基础模板\">#</a> cmake 基础模板</h1>\n<p><a href=\"https://cmake.org/\">Cmake</a> 基础教程</p>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"><span>cmake模板</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span> <span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.19</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">project</span> <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">EXECUTABLE_OUTPUT_PATH</span> <span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/bin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">aux_source_directory</span> <span class=\"token punctuation\">(</span>src SRC_LIST<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">include_directories</span> <span class=\"token punctuation\">(</span>include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">add_executable</span> <span class=\"token punctuation\">(</span>CHESS <span class=\"token punctuation\">$&#123;</span>SRC_LIST<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>cmake_minimum_required (VERSION 3.19)</code> : 指定了项目所需的 CMake 的最低版本为 3.19。这意味着在构建项目时，必须使用 3.19 或更高版本的 CMake。</li>\n<li><code>project (demo)</code> : 定义了项目的名称为 demo。这个命令还会隐式地创建一些与项目相关的变量，例如 <code>$&#123;PROJECT_SOURCE_DIR&#125;</code>  和 <code>$&#123;PROJECT_BINARY_DIR&#125;</code> 。</li>\n<li><code>set (EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;/bin)</code> : 设置了可执行文件的输出路径为 <code>$&#123;PROJECT_SOURCE_DIR&#125;/bin</code> 。这意味着编译后的可执行文件将会被放置在项目源代码目录下的 bin 文件夹中。</li>\n<li><code>aux_source_directory (src SRC_LIST)</code> : 在 src 目录中搜索所有的源文件，并将它们的文件名保存到变量 SRC_LIST 中。</li>\n<li><code>include_directories (include)</code> : 添加 include 目录到项目中。这个命令会告诉编译器在编译时要去哪里查找头文件。</li>\n<li><code>add_executable (CHESS $&#123;SRC_LIST&#125;)</code> : 创建一个名为 CHESS 的可执行文件，其中包含了变量 SRC_LIST 中列出的所有源文件。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://i.111666.best/image/65Akuy3sxzSzbg2JHfTis3.png\" alt=\"项目目录\" title=\"项目目录结构\" /></p>\n<h1 id=\"cmake链接库模板\"><a class=\"anchor\" href=\"#cmake链接库模板\">#</a> cmake 链接库模板</h1>\n<figure class=\"highlight cmake\"><figcaption data-lang=\"CMake\"><span>cmake链接库</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">cmake_minimum_required</span><span class=\"token punctuation\">(</span><span class=\"token property\">VERSION</span> <span class=\"token number\">3.20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>linkLib<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">include_directories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/myLib/include<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">link_directories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">$&#123;</span><span class=\"token variable\">PROJECT_SOURCE_DIR</span><span class=\"token punctuation\">&#125;</span>/myLib/lib<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>main main.cpp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">target_link_libraries</span><span class=\"token punctuation\">(</span>main mylib.lib<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>include_directories($&#123;PROJECT_SOURCE_DIR&#125;/myLib/include)</code>  添加头文件目录</p>\n<p><code>link_directories($&#123;PROJECT_SOURCE_DIR&#125;/myLib/lib)</code>  添加库目录</p>\n<p><code>add_executable(main main.cpp)</code>  编译 <code>main.exe</code></p>\n<p><code>target_link_libraries(main mylib.lib)</code>  把 <code>mylib.lib</code>  链接到 <code>main.exe</code></p>\n",
            "tags": [
                "教程",
                "cmake",
                "教程"
            ]
        }
    ]
}